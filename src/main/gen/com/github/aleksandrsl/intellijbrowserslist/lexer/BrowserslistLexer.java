/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.aleksandrsl.intellijbrowserslist.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.aleksandrsl.intellijbrowserslist.psi.BrowserslistTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/aleksandrsl/Projects/intellij-browserslist/src/main/grammar/Browserslist.flex</tt>
 */
class BrowserslistLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\5\1\2\1\1\1\6\1\3\22\4\1\5\2\4\1\7\1\4\1\14\7\4\1\23\1\13\1\4\12\12"+
    "\2\4\1\10\1\11\1\10\2\4\1\33\1\45\1\50\1\4\1\41\1\24\6\4\1\43\1\57\1\40\1"+
    "\4\1\55\1\4\1\37\1\4\1\54\11\4\1\36\1\4\1\21\1\44\1\46\1\35\1\27\1\30\1\53"+
    "\1\51\1\25\1\60\1\47\1\22\1\15\1\34\1\31\1\42\1\56\1\26\1\17\1\20\1\52\1\61"+
    "\1\4\1\32\1\16\13\4\1\1\32\4\1\0\77\4\12\12\46\4\12\12\14\4\12\12\20\4\12"+
    "\12\6\4\12\12\6\4\13\0\35\4\2\1\5\4\1\0\57\4\1\0\26\4\12\12\16\4\62\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\31\3\1\0\1\5\1\6\1\10\1\3\1\11\6\3"+
    "\1\12\1\3\1\13\2\3\1\12\20\3\1\0\1\5"+
    "\1\14\30\3\1\0\5\3\1\15\6\3\1\16\13\3"+
    "\1\0\1\14\1\17\1\20\1\21\22\3\1\0\11\3"+
    "\1\12\11\3\1\22\1\23\1\3\1\12\2\3\1\22"+
    "\4\3\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\144\0\372"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\310\0\310\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\310\0\u08ca\0\u08fc\0\310\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\310\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\310\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u11c6\0\310\0\310\0\310\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u0b86\0\u1bbc\0\u1bee\0\62\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\310\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\310\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\6\1\12\1\13\1\6\1\14\1\15\1\16"+
    "\1\6\1\17\1\20\1\6\1\21\1\22\1\6\1\23"+
    "\1\24\1\25\1\6\1\26\1\6\1\27\1\6\1\30"+
    "\1\31\1\32\2\6\1\33\1\34\1\6\1\35\1\36"+
    "\1\6\1\37\1\6\1\40\1\41\1\6\1\42\1\6"+
    "\1\43\64\0\1\7\2\0\2\7\55\0\1\3\57\0"+
    "\4\44\1\6\2\44\53\6\2\45\2\44\1\10\2\45"+
    "\53\10\4\44\1\6\2\44\2\6\1\46\50\6\4\44"+
    "\1\6\2\44\3\6\1\12\1\13\1\47\6\6\1\50"+
    "\36\6\4\44\1\6\2\44\3\6\1\51\47\6\4\44"+
    "\1\6\2\44\12\6\1\52\40\6\4\44\1\6\2\44"+
    "\20\6\1\53\32\6\4\44\1\6\2\44\16\6\1\54"+
    "\34\6\4\44\1\6\2\44\25\6\1\55\25\6\4\44"+
    "\1\6\2\44\12\6\1\56\40\6\4\44\1\6\2\44"+
    "\16\6\1\57\34\6\4\44\1\6\2\44\20\6\1\60"+
    "\1\6\1\61\2\6\1\62\3\6\1\63\21\6\4\44"+
    "\1\6\2\44\13\6\1\64\37\6\4\44\1\6\2\44"+
    "\21\6\1\65\1\6\1\65\27\6\4\44\1\6\2\44"+
    "\33\6\1\66\17\6\4\44\1\6\2\44\25\6\1\67"+
    "\25\6\4\44\1\6\2\44\20\6\1\70\32\6\4\44"+
    "\1\6\2\44\12\6\1\71\40\6\4\44\1\6\2\44"+
    "\33\6\1\72\17\6\4\44\1\6\2\44\23\6\1\73"+
    "\2\6\1\74\24\6\4\44\1\6\2\44\35\6\1\65"+
    "\15\6\4\44\1\6\2\44\12\6\1\75\1\76\37\6"+
    "\4\44\1\6\2\44\12\6\1\77\40\6\4\44\1\6"+
    "\2\44\42\6\1\100\10\6\4\44\1\6\2\44\25\6"+
    "\1\101\25\6\4\44\1\6\2\44\41\6\1\102\11\6"+
    "\4\44\1\6\2\44\46\6\1\103\4\6\4\44\1\6"+
    "\2\44\22\6\1\104\30\6\4\44\1\6\2\44\20\6"+
    "\1\105\32\6\4\44\1\0\2\44\10\0\1\106\42\0"+
    "\2\45\2\44\1\107\2\45\53\107\4\44\1\6\2\44"+
    "\3\6\1\110\47\6\4\44\1\6\2\44\3\6\1\51"+
    "\1\6\1\47\45\6\4\44\1\6\2\44\51\6\1\111"+
    "\1\6\4\44\1\6\2\44\12\6\1\112\40\6\4\44"+
    "\1\6\2\44\25\6\1\113\25\6\4\44\1\6\2\44"+
    "\26\6\1\114\24\6\4\44\1\6\2\44\10\6\1\115"+
    "\42\6\4\44\1\6\2\44\17\6\1\116\33\6\4\44"+
    "\1\6\2\44\27\6\1\117\23\6\4\44\1\6\2\44"+
    "\10\6\1\120\42\6\4\44\1\6\2\44\30\6\1\65"+
    "\22\6\4\44\1\6\2\44\20\6\1\121\32\6\4\44"+
    "\1\6\2\44\27\6\1\122\23\6\4\44\1\6\2\44"+
    "\26\6\1\123\24\6\4\44\1\6\2\44\12\6\1\124"+
    "\6\6\1\125\31\6\4\44\1\6\2\44\6\6\1\126"+
    "\12\6\1\127\31\6\4\44\1\6\2\44\20\6\1\130"+
    "\32\6\4\44\1\6\2\44\33\6\1\131\17\6\4\44"+
    "\1\6\2\44\44\6\1\132\6\6\4\44\1\6\2\44"+
    "\16\6\1\133\34\6\4\44\1\6\2\44\12\6\1\134"+
    "\40\6\4\44\1\6\2\44\16\6\1\135\34\6\4\44"+
    "\1\6\2\44\17\6\1\136\33\6\4\44\1\6\2\44"+
    "\17\6\1\137\33\6\4\44\1\6\2\44\24\6\1\26"+
    "\26\6\4\44\1\6\2\44\12\6\1\26\40\6\4\44"+
    "\1\6\2\44\26\6\1\132\24\6\4\44\1\6\2\44"+
    "\17\6\1\140\33\6\20\0\1\141\41\0\2\107\2\0"+
    "\56\107\4\44\1\6\2\44\3\6\1\110\10\6\1\142"+
    "\36\6\4\44\1\6\2\44\22\6\1\143\30\6\4\44"+
    "\1\6\2\44\17\6\1\144\33\6\4\44\1\6\2\44"+
    "\37\6\1\145\13\6\4\44\1\6\2\44\27\6\1\146"+
    "\23\6\4\44\1\6\2\44\11\6\1\147\41\6\4\44"+
    "\1\6\2\44\20\6\1\150\32\6\4\44\1\6\2\44"+
    "\6\6\1\151\44\6\4\44\1\6\2\44\27\6\1\152"+
    "\23\6\4\44\1\6\2\44\37\6\1\153\13\6\4\44"+
    "\1\6\2\44\6\6\1\154\44\6\4\44\1\6\2\44"+
    "\17\6\1\155\33\6\4\44\1\6\2\44\26\6\1\156"+
    "\24\6\4\44\1\6\2\44\12\6\1\157\40\6\4\44"+
    "\1\6\2\44\10\6\1\160\42\6\4\44\1\6\2\44"+
    "\12\6\1\161\40\6\4\44\1\6\2\44\17\6\1\162"+
    "\33\6\4\44\1\6\2\44\13\6\1\163\37\6\4\44"+
    "\1\6\2\44\20\6\1\65\32\6\4\44\1\6\2\44"+
    "\26\6\1\164\24\6\4\44\1\6\2\44\37\6\1\165"+
    "\13\6\4\44\1\6\2\44\22\6\1\166\30\6\4\44"+
    "\1\6\2\44\22\6\1\167\30\6\4\44\1\6\2\44"+
    "\20\6\1\170\32\6\4\44\1\6\2\44\10\6\1\171"+
    "\42\6\21\0\1\172\40\0\4\44\1\6\2\44\3\6"+
    "\1\173\47\6\4\44\1\6\2\44\17\6\1\174\33\6"+
    "\4\44\1\6\2\44\10\6\1\175\42\6\4\44\1\6"+
    "\2\44\20\6\1\176\32\6\4\44\1\6\2\44\21\6"+
    "\1\177\15\6\1\200\3\6\1\201\3\6\1\202\3\6"+
    "\4\44\1\6\2\44\21\6\1\203\31\6\4\44\1\6"+
    "\2\44\22\6\1\33\30\6\4\44\1\6\2\44\10\6"+
    "\1\204\42\6\4\44\1\6\2\44\11\6\1\205\41\6"+
    "\4\44\1\6\2\44\16\6\1\206\3\6\1\33\30\6"+
    "\4\44\1\6\2\44\22\6\1\207\30\6\4\44\1\6"+
    "\2\44\43\6\1\210\7\6\4\44\1\6\2\44\43\6"+
    "\1\211\7\6\4\44\1\6\2\44\17\6\1\212\33\6"+
    "\4\44\1\6\2\44\12\6\1\213\5\6\1\65\32\6"+
    "\4\44\1\6\2\44\22\6\1\214\30\6\4\44\1\6"+
    "\2\44\43\6\1\65\7\6\4\44\1\6\2\44\40\6"+
    "\1\215\12\6\4\44\1\6\2\44\10\6\1\65\42\6"+
    "\4\44\1\6\2\44\6\6\1\216\44\6\4\44\1\6"+
    "\2\44\13\6\1\217\37\6\4\44\1\6\2\44\16\6"+
    "\1\220\34\6\20\0\1\221\41\0\4\44\1\6\2\44"+
    "\21\6\1\65\31\6\4\44\1\6\2\44\42\6\1\222"+
    "\10\6\4\44\1\6\2\44\37\6\1\65\13\6\4\44"+
    "\1\6\2\44\47\6\1\65\3\6\4\44\1\6\2\44"+
    "\22\6\1\223\30\6\4\44\1\6\2\44\12\6\1\177"+
    "\40\6\4\44\1\6\2\44\17\6\1\224\33\6\4\44"+
    "\1\6\2\44\25\6\1\212\25\6\4\44\1\6\2\44"+
    "\16\6\1\225\34\6\4\44\1\6\2\44\13\6\1\226"+
    "\37\6\4\44\1\6\2\44\25\6\1\227\25\6\4\44"+
    "\1\6\2\44\16\6\1\65\34\6\4\44\1\6\2\44"+
    "\34\6\1\230\16\6\4\44\1\6\2\44\17\6\1\231"+
    "\33\6\4\44\1\6\2\44\36\6\1\232\14\6\4\44"+
    "\1\6\2\44\20\6\1\233\32\6\4\44\1\6\2\44"+
    "\20\6\1\234\32\6\4\44\1\6\2\44\22\6\1\235"+
    "\30\6\17\0\1\236\42\0\4\44\1\6\2\44\17\6"+
    "\1\65\33\6\4\44\1\6\2\44\23\6\1\233\27\6"+
    "\4\44\1\6\2\44\22\6\1\237\30\6\4\44\1\6"+
    "\2\44\26\6\1\65\24\6\4\44\1\6\2\44\11\6"+
    "\1\240\41\6\4\44\1\6\2\44\44\6\1\65\6\6"+
    "\4\44\1\6\2\44\16\6\1\206\3\6\1\241\30\6"+
    "\4\44\1\6\2\44\20\6\1\242\32\6\4\44\1\6"+
    "\2\44\20\6\1\243\32\6\4\44\1\6\2\44\12\6"+
    "\1\244\40\6\4\44\1\6\2\44\25\6\1\245\25\6"+
    "\4\44\1\6\2\44\25\6\1\65\25\6\4\44\1\6"+
    "\2\44\10\6\1\246\42\6\4\44\1\6\2\44\35\6"+
    "\1\247\15\6\4\44\1\6\2\44\17\6\1\250\33\6"+
    "\4\44\1\6\2\44\17\6\1\251\33\6\4\44\1\6"+
    "\2\44\10\6\1\252\42\6\4\44\1\6\2\44\10\6"+
    "\1\253\42\6\4\44\1\6\2\44\16\6\1\254\34\6"+
    "\4\44\1\6\2\44\34\6\1\255\16\6\4\44\1\6"+
    "\2\44\17\6\1\256\33\6\4\44\1\6\2\44\20\6"+
    "\1\257\32\6\4\44\1\6\2\44\13\6\1\132\37\6"+
    "\4\44\1\6\2\44\22\6\1\241\30\6\4\44\1\6"+
    "\2\44\7\6\1\65\43\6\4\44\1\6\2\44\26\6"+
    "\1\260\24\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\40\1\1\0\41\1\1\0\32\1\1\0"+
    "\30\1\1\0\26\1\1\0\14\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BrowserslistLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BrowserslistLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 21: break;
          case 2: 
            { return BrowserslistTypes.EOL;
            } 
            // fall through
          case 22: break;
          case 3: 
            { return BrowserslistTypes.STATS;
            } 
            // fall through
          case 23: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 24: break;
          case 5: 
            { return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 25: break;
          case 6: 
            { return BrowserslistTypes.COMPARE;
            } 
            // fall through
          case 26: break;
          case 7: 
            { return BrowserslistTypes.INTEGER;
            } 
            // fall through
          case 27: break;
          case 8: 
            { return BrowserslistTypes.PERCENT;
            } 
            // fall through
          case 28: break;
          case 9: 
            { return BrowserslistTypes.FLOAT;
            } 
            // fall through
          case 29: break;
          case 10: 
            { return BrowserslistTypes.TARGET;
            } 
            // fall through
          case 30: break;
          case 11: 
            { return BrowserslistTypes.IN;
            } 
            // fall through
          case 31: break;
          case 12: 
            { return BrowserslistTypes.TIME;
            } 
            // fall through
          case 32: break;
          case 13: 
            { return BrowserslistTypes.LAST;
            } 
            // fall through
          case 33: break;
          case 14: 
            { return BrowserslistTypes.DEAD;
            } 
            // fall through
          case 34: break;
          case 15: 
            { return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 35: break;
          case 16: 
            { return BrowserslistTypes.YEARS;
            } 
            // fall through
          case 36: break;
          case 17: 
            { return BrowserslistTypes.SINCE;
            } 
            // fall through
          case 37: break;
          case 18: 
            { return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 38: break;
          case 19: 
            { return BrowserslistTypes.DEFAULTS;
            } 
            // fall through
          case 39: break;
          case 20: 
            { return BrowserslistTypes.UNRELEASED;
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
