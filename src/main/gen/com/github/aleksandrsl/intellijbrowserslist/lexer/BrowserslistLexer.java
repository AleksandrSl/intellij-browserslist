/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.aleksandrsl.intellijbrowserslist.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.aleksandrsl.intellijbrowserslist.psi.BrowserslistTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/runner/work/intellij-browserslist/intellij-browserslist/src/main/grammar/Browserslist.flex</tt>
 */
class BrowserslistLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TARGET = 2;
  public static final int SUPPORTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\6\1\7\1\10\1\12\1\13\3\0"+
    "\1\14\1\15\1\16\1\15\2\17\1\20\3\17\1\20\7\17\1\21\10\17\1\22\50\17\1\23\1"+
    "\17\1\24\1\0\1\25\1\26\2\0\16\17\1\27\1\30\1\31\1\32\2\17\1\33\11\17\1\34"+
    "\21\17\1\33\25\17\1\35\3\17\1\20\1\36\1\35\4\17\1\0\1\35\4\17\1\34\1\37\1"+
    "\0\3\17\2\40\3\0\1\17\1\40\10\17\1\4\1\41\14\17\1\42\1\43\1\17\1\44\1\4\1"+
    "\45\2\0\7\17\1\46\14\17\1\24\1\0\1\4\1\47\4\17\1\50\1\15\5\17\1\50\2\0\3\17"+
    "\1\51\10\0\2\17\1\27\1\50\2\0\1\52\1\17\1\33\17\17\1\53\1\4\1\35\1\17\1\42"+
    "\1\43\1\54\2\17\1\44\1\55\1\56\1\43\1\57\1\60\1\61\1\53\1\4\1\24\1\0\1\62"+
    "\1\63\1\54\2\17\1\44\1\64\1\65\1\63\1\66\1\36\1\67\1\70\1\4\1\50\1\0\1\62"+
    "\1\34\1\33\2\17\1\44\1\71\1\56\1\34\1\72\1\73\1\0\1\53\1\4\1\0\1\36\1\62\1"+
    "\43\1\54\2\17\1\44\1\71\1\56\1\43\1\66\1\74\1\61\1\53\1\4\1\36\1\0\1\75\1"+
    "\76\1\77\1\100\1\101\1\76\1\17\1\23\1\76\1\77\1\102\1\0\1\70\1\4\2\0\1\42"+
    "\1\27\1\44\2\17\1\44\1\17\1\103\1\27\1\77\1\104\1\40\1\53\1\4\2\0\1\42\1\27"+
    "\1\44\2\17\1\44\1\42\1\56\1\27\1\77\1\104\1\31\1\53\1\4\1\105\1\0\1\62\1\27"+
    "\1\44\4\17\1\46\1\27\1\106\1\52\1\60\1\53\1\4\1\0\1\107\1\75\1\17\1\20\1\107"+
    "\2\17\1\33\1\110\1\20\1\111\1\112\1\17\1\70\1\4\1\113\1\0\1\35\6\17\1\40\1"+
    "\17\1\20\1\4\1\114\4\0\1\115\1\116\1\52\1\35\1\117\1\75\1\17\1\72\1\112\1"+
    "\50\1\4\1\120\4\0\1\73\2\0\1\24\1\4\1\114\1\121\1\122\1\17\1\35\3\17\1\25"+
    "\1\35\1\17\1\27\2\17\1\35\3\17\1\25\1\31\7\0\10\17\1\4\1\114\10\17\1\4\1\123"+
    "\4\17\1\34\1\16\5\17\1\124\51\17\1\77\1\20\1\77\5\17\1\77\4\17\1\77\1\20\1"+
    "\77\1\17\1\20\7\17\1\77\10\17\1\46\4\0\2\17\2\0\12\17\2\50\1\35\114\17\1\43"+
    "\2\17\1\125\2\17\1\40\11\17\1\76\1\17\1\73\1\17\1\27\1\25\1\0\2\17\1\25\1"+
    "\0\2\17\1\51\1\0\1\17\1\27\1\126\1\0\12\17\1\127\1\130\1\4\1\114\3\0\1\131"+
    "\1\4\1\114\13\17\1\0\5\17\1\40\10\17\1\50\1\0\3\17\1\20\1\17\1\51\1\17\1\51"+
    "\1\70\1\4\3\17\1\50\1\25\1\0\5\17\1\51\3\17\1\24\1\4\1\114\4\0\3\17\1\51\7"+
    "\17\1\20\3\17\1\43\1\4\1\114\1\4\1\114\1\60\1\0\1\17\1\20\10\0\11\17\1\51"+
    "\1\4\1\114\1\0\1\132\1\51\1\0\6\17\1\4\1\47\6\17\1\51\1\0\7\17\1\0\1\4\1\133"+
    "\1\4\1\47\3\17\1\50\1\17\1\73\10\0\1\124\3\17\1\20\1\24\36\17\1\50\1\132\42"+
    "\17\2\50\4\17\2\50\1\17\1\134\3\17\1\50\6\17\1\27\1\112\1\135\1\25\1\136\1"+
    "\51\1\17\1\25\1\135\1\25\1\137\1\140\3\0\1\141\1\0\1\60\1\73\1\0\1\142\1\143"+
    "\2\0\1\36\1\60\2\0\1\17\1\25\6\0\4\17\1\73\1\0\1\111\1\107\1\110\1\144\1\26"+
    "\1\145\1\17\1\56\1\146\1\147\2\0\5\17\1\73\144\0\1\74\6\17\1\24\42\0\5\17"+
    "\1\20\5\17\1\20\20\17\1\25\1\132\1\51\1\0\4\17\1\34\1\16\7\17\1\60\1\0\1\60"+
    "\2\17\1\20\1\0\10\20\4\17\5\0\1\60\72\0\1\150\3\0\1\35\1\17\1\144\1\25\1\35"+
    "\11\17\1\20\1\151\1\35\12\17\1\124\1\146\4\17\1\50\1\35\12\17\1\20\2\0\3\17"+
    "\1\40\6\0\170\17\1\50\11\0\72\17\1\50\5\0\21\17\1\25\10\0\5\17\1\50\41\17"+
    "\1\25\2\17\1\4\1\152\2\0\6\17\1\124\1\34\16\17\1\24\3\0\1\60\1\17\1\107\14"+
    "\17\1\54\3\17\1\20\1\17\7\0\1\60\6\17\3\0\6\17\1\51\1\0\10\17\1\50\1\0\1\4"+
    "\1\114\3\17\1\153\1\4\1\47\3\17\1\50\4\17\1\51\1\0\3\17\1\25\10\17\1\73\1"+
    "\60\1\4\1\114\2\17\1\4\1\154\6\17\1\20\1\0\1\17\1\50\1\4\1\114\2\17\1\20\1"+
    "\107\10\17\1\40\2\0\1\131\2\17\1\155\1\0\3\156\1\0\2\20\5\17\1\124\1\50\1"+
    "\0\17\17\1\157\1\4\1\114\64\17\1\51\1\0\2\17\1\20\1\132\5\17\1\51\40\0\55"+
    "\17\1\50\15\17\1\24\4\0\1\20\1\0\1\132\1\146\1\17\1\44\1\20\1\112\1\160\15"+
    "\17\1\24\3\0\1\132\54\17\1\50\2\0\10\17\1\107\6\17\5\0\1\17\1\51\2\17\2\0"+
    "\2\17\1\101\2\0\1\146\4\0\1\27\20\17\1\25\2\0\1\4\1\114\1\35\2\17\1\63\1\35"+
    "\2\17\1\40\1\74\12\17\1\20\3\107\1\161\4\0\1\17\1\42\2\17\1\20\2\17\1\162"+
    "\1\17\1\50\1\17\1\50\4\0\17\17\1\40\10\0\6\17\1\25\20\0\1\16\20\0\3\17\1\25"+
    "\6\17\1\73\1\0\1\73\3\0\4\17\2\0\3\17\1\40\5\17\1\40\3\17\1\50\4\17\1\51\1"+
    "\17\1\144\5\0\23\17\1\50\1\4\1\114\4\17\1\51\4\17\1\51\5\17\1\0\6\17\1\51"+
    "\23\0\46\17\1\20\1\0\2\17\1\50\1\0\1\17\23\0\1\50\1\44\4\17\1\34\1\163\2\17"+
    "\1\50\1\0\2\17\1\20\1\0\3\17\1\20\10\0\2\17\1\157\1\0\2\17\1\50\1\0\3\17\1"+
    "\24\10\0\7\17\1\74\10\0\1\164\1\52\1\42\1\35\2\17\1\51\1\63\4\0\3\17\1\25"+
    "\3\17\1\25\4\0\1\17\1\35\2\17\1\20\3\0\6\17\1\50\1\0\2\17\1\50\1\0\2\17\1"+
    "\40\1\0\2\17\1\24\15\0\11\17\1\73\6\0\6\17\1\40\1\0\6\17\1\40\41\0\10\17\1"+
    "\20\3\0\1\70\1\4\1\0\1\60\7\17\1\40\2\0\3\17\1\73\1\4\1\114\6\17\1\165\1\4"+
    "\2\0\4\17\1\166\1\0\10\17\1\25\1\161\1\4\1\167\4\0\2\17\1\33\4\17\1\31\10"+
    "\0\1\20\1\170\1\17\1\34\1\17\1\73\7\17\1\40\1\4\1\114\1\42\1\43\1\54\2\17"+
    "\1\44\1\71\1\56\1\43\1\66\1\102\1\146\1\136\2\25\21\0\11\17\1\40\1\4\1\114"+
    "\4\0\10\17\1\34\1\0\1\4\1\114\24\0\6\17\1\50\1\17\1\73\2\0\1\50\4\0\10\17"+
    "\1\171\1\0\1\4\1\114\4\0\7\17\1\0\1\4\1\114\6\0\3\17\1\103\1\17\1\51\1\4\1"+
    "\114\54\0\10\17\1\4\1\114\1\0\1\60\70\0\7\17\1\73\40\0\1\17\1\44\4\17\1\20"+
    "\1\17\1\73\1\0\1\4\1\114\2\0\1\107\3\17\1\107\2\17\1\35\1\20\51\0\63\17\1"+
    "\24\14\0\15\17\1\20\2\0\30\17\1\51\27\0\5\17\1\20\72\0\10\17\1\20\67\0\7\17"+
    "\1\73\3\17\1\20\1\4\1\114\14\0\3\17\1\50\1\25\1\0\6\17\1\20\1\0\1\51\1\0\1"+
    "\4\1\114\1\132\2\17\1\146\2\17\56\0\10\17\1\25\1\0\5\17\1\20\1\0\1\60\2\17"+
    "\10\0\1\73\3\0\75\17\1\25\2\0\36\17\1\40\41\0\1\24\77\0\15\17\1\40\1\17\1"+
    "\25\1\17\1\73\1\17\1\172\130\0\1\146\1\103\1\40\1\132\1\46\1\51\3\0\1\173"+
    "\22\0\1\161\67\0\12\17\1\27\10\17\1\27\1\174\1\175\1\17\1\176\1\42\7\17\1"+
    "\34\1\46\2\27\3\17\1\177\1\112\1\107\1\44\51\17\1\50\3\17\1\44\2\17\1\124"+
    "\3\17\1\124\2\17\1\27\3\17\1\27\2\17\1\20\3\17\1\20\3\17\1\44\3\17\1\44\2"+
    "\17\1\124\1\53\6\4\6\17\1\20\1\132\5\17\1\25\1\16\1\0\1\142\2\0\1\132\1\35"+
    "\1\17\52\0\1\20\2\17\1\54\1\160\1\40\72\0\30\17\1\25\1\0\1\20\5\0\11\17\1"+
    "\40\1\4\1\114\24\0\1\42\3\17\1\115\1\35\1\124\1\200\1\111\1\201\1\115\1\134"+
    "\1\115\2\124\1\67\1\17\1\33\1\17\1\51\1\62\1\33\1\17\1\51\116\0\3\17\1\24"+
    "\3\17\1\24\3\17\1\24\16\0\32\17\1\20\5\0\106\17\1\25\1\0\33\17\1\50\120\17"+
    "\1\24\53\0\3\17\1\50\134\0\36\17\2\0");

  /* The ZZ_CMAP_A table has 1040 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\4\1\2\1\1\1\5\1\3\2\6\1\4\2\6\1\7\1\6\1\14\6\6\1\50\1\24\1\13\1\6"+
    "\12\12\2\6\1\10\1\11\1\10\2\6\1\22\1\40\1\41\1\35\1\31\1\26\1\45\1\43\1\27"+
    "\1\47\1\42\1\23\1\15\1\34\1\32\1\37\1\46\1\30\1\20\1\21\1\44\1\52\1\25\1\33"+
    "\1\16\1\25\1\51\1\6\1\0\1\6\1\36\1\33\1\16\1\25\12\6\1\1\2\6\1\17\11\6\1\25"+
    "\12\6\1\25\2\6\17\25\1\6\2\27\15\25\1\20\2\25\4\6\4\25\6\6\5\25\7\6\1\25\1"+
    "\6\1\25\1\6\5\25\1\6\2\25\2\6\4\25\1\6\1\25\6\6\1\25\1\6\3\25\1\6\1\25\1\6"+
    "\4\25\1\6\13\25\1\6\1\25\1\6\7\25\1\6\1\25\7\6\2\25\1\6\2\25\1\6\4\25\5\6"+
    "\2\12\4\6\6\25\1\6\10\25\2\6\2\25\1\6\6\25\2\12\3\25\2\6\4\25\2\6\3\25\2\12"+
    "\14\25\2\6\4\25\10\6\10\25\2\6\2\12\1\25\2\6\6\25\1\6\1\25\3\6\4\25\2\6\5"+
    "\25\2\6\4\25\10\6\1\25\4\6\2\25\1\6\1\25\1\6\3\25\1\6\6\25\4\6\2\25\1\6\2"+
    "\25\1\6\2\25\1\6\2\25\2\6\1\25\1\6\3\25\2\6\3\25\3\6\4\25\1\6\1\25\7\6\2\12"+
    "\1\25\1\6\2\25\1\6\5\25\1\6\3\25\2\6\1\25\15\6\2\25\2\6\2\25\1\6\6\25\3\6"+
    "\3\25\1\6\4\25\3\6\2\25\1\6\1\25\1\6\2\25\3\6\2\25\3\6\1\25\6\6\3\25\3\6\3"+
    "\25\5\6\2\25\2\6\2\25\5\6\1\25\1\6\5\25\3\6\12\25\1\6\1\25\4\6\1\25\4\6\6"+
    "\25\1\6\1\25\3\6\2\25\4\6\2\12\7\6\2\25\1\6\1\25\2\6\2\25\1\6\1\25\2\6\1\25"+
    "\3\6\3\25\1\6\1\25\1\6\1\25\2\12\2\6\4\25\5\6\1\25\1\6\1\25\1\6\1\25\4\6\2"+
    "\25\2\12\4\25\2\6\3\25\1\6\4\25\1\17\10\25\1\6\2\25\4\6\4\25\3\6\1\25\4\6"+
    "\2\25\5\6\3\25\5\6\5\25\2\12\3\6\3\25\1\6\1\25\1\6\1\25\1\6\1\25\1\6\1\25"+
    "\2\6\3\25\1\6\6\25\2\6\2\25\13\17\5\6\2\1\5\6\1\17\4\6\1\25\12\6\1\17\1\6"+
    "\5\25\2\6\1\25\1\6\1\42\3\25\1\6\1\25\5\6\5\25\4\6\1\25\1\6\1\17\4\6\3\25"+
    "\1\6\2\25\2\6\3\25\2\12\2\25\7\6\1\25\1\6\1\25\2\6\2\12\5\25\3\6\5\25\2\6"+
    "\6\25\1\6\3\25\1\6\2\25\2\6\2\25\1\6\2\25\1\6\2\25\2\6\3\25\3\6\3\25\1\6\2"+
    "\25\1\6\2\25\3\6\1\25\2\6\5\25\1\6\2\25\1\6\5\25\1\6\2\12\4\25\2\6\1\25\1"+
    "\6\2\12\1\25\1\6\1\25\3\6\1\25\1\6\4\25\1\6\2\25\3\6\1\25\3\6\2\25\3\6\2\25"+
    "\3\6\4\25\4\6\1\25\2\6\2\25\2\6\4\25\1\6\4\25\1\6\1\25\1\6\5\25\1\6\4\25\2"+
    "\6\1\25\1\6\1\25\5\6\1\25\1\6\1\25\1\6\3\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\23\4\1\11\1\12\1\4\1\13\1\14"+
    "\7\7\4\15\1\0\2\5\1\6\1\10\1\16\1\17"+
    "\1\4\1\20\10\17\1\21\1\17\1\21\1\17\1\22"+
    "\3\17\1\11\15\17\3\0\1\14\5\0\1\15\1\11"+
    "\1\15\1\0\1\23\10\4\1\24\3\4\1\21\6\4"+
    "\1\25\14\4\1\26\4\0\1\24\1\25\1\0\1\24"+
    "\1\25\1\0\13\4\1\27\10\4\1\30\13\4\1\26"+
    "\5\0\1\23\1\4\1\31\1\32\2\4\1\33\13\4"+
    "\1\21\4\4\1\34\5\4\1\35\2\0\15\4\1\21"+
    "\3\4\1\0\1\17\3\4\1\36\5\4\1\37\1\4"+
    "\1\40\1\41\1\4\1\42\1\21\1\4\1\43\2\4"+
    "\1\40\1\41\5\4\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\201\0\254\0\327\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\201\0\u0183\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4"+
    "\0\201\0\201\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\201\0\u07ba\0\u0102\0\u0102\0\u07e5"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0102\0\u0993\0\u09be\0\u09e9\0\u0102\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0102\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0cc4\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u068d\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u0102\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb"+
    "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\201\0\201\0\u14d4\0\u068d\0\u068d\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u0102\0\u1703\0\u172e\0\u1759\0\u1784"+
    "\0\u17af\0\u17da\0\u1805\0\u1830\0\u0102\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09"+
    "\0\201\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u152a\0\u1b0b"+
    "\0\u0102\0\u0102\0\u1b36\0\u1b61\0\u0102\0\u1b8c\0\u1bb7\0\u1be2"+
    "\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u0102\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\201\0\u1f13\0\u1f3e\0\u1f69\0\u1f94"+
    "\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec"+
    "\0\u2117\0\u2142\0\u216d\0\u0c6e\0\u2198\0\u21c3\0\u21ee\0\u2219"+
    "\0\201\0\u2244\0\u226f\0\u229a\0\u0102\0\u22c5\0\u22f0\0\u231b"+
    "\0\u2346\0\u2371\0\u0102\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u0102"+
    "\0\u2448\0\u2473\0\u0102\0\u249e\0\u24c9\0\u0102\0\201\0\u24f4"+
    "\0\u251f\0\u254a\0\u2575\0\u25a0\0\u0102\0\u0102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\11\1\17\1\20\1\14\1\21"+
    "\1\22\1\23\1\24\1\11\1\22\1\25\1\26\1\22"+
    "\1\27\1\30\1\22\1\31\1\32\1\22\1\33\1\34"+
    "\1\35\1\36\1\22\1\37\1\22\1\40\1\22\1\41"+
    "\1\42\1\43\1\14\2\5\1\6\1\7\1\10\1\14"+
    "\1\44\1\13\1\14\2\45\1\14\1\46\3\14\1\47"+
    "\1\50\6\14\1\51\1\52\1\14\1\53\13\14\1\41"+
    "\1\14\1\54\1\14\2\5\1\6\1\7\1\10\1\14"+
    "\1\44\2\14\1\55\2\14\2\55\1\14\2\55\1\56"+
    "\7\55\1\57\1\55\1\60\13\55\1\41\1\14\1\55"+
    "\55\0\1\5\54\0\2\7\46\0\5\61\2\11\2\0"+
    "\5\11\1\61\30\11\2\0\1\11\1\62\1\63\2\61"+
    "\2\63\2\12\2\62\5\12\1\63\30\12\2\62\1\12"+
    "\11\0\1\64\42\0\5\61\2\11\2\0\1\65\1\16"+
    "\1\66\2\67\1\61\4\67\1\70\23\67\2\0\1\67"+
    "\1\0\5\61\2\11\2\0\1\71\4\11\1\61\30\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\1\67\2\11"+
    "\2\67\1\61\2\67\1\72\1\67\1\11\23\67\2\0"+
    "\1\67\1\0\5\61\2\11\2\0\1\67\2\11\2\67"+
    "\1\61\4\67\1\11\4\67\1\73\16\67\2\0\1\67"+
    "\1\0\5\61\2\11\2\0\1\67\2\11\2\67\1\61"+
    "\2\67\1\74\1\67\1\11\2\67\1\75\14\67\1\76"+
    "\3\67\2\0\1\67\1\0\5\61\2\11\2\0\1\67"+
    "\2\11\2\67\1\61\4\67\1\11\23\67\2\0\1\67"+
    "\1\0\5\61\2\11\2\0\1\67\2\11\2\67\1\61"+
    "\3\67\1\77\1\11\7\67\1\100\13\67\2\0\1\67"+
    "\1\0\5\61\2\11\2\0\1\67\2\11\2\67\1\61"+
    "\2\67\1\101\1\67\1\11\23\67\2\0\1\67\1\0"+
    "\5\61\2\11\2\0\1\67\2\11\2\67\1\61\4\67"+
    "\1\11\1\67\1\102\1\103\3\67\1\102\14\67\2\0"+
    "\1\67\1\0\5\61\2\11\2\0\1\67\2\11\2\67"+
    "\1\61\4\67\1\11\4\67\1\104\1\105\1\67\1\106"+
    "\13\67\2\0\1\67\1\0\5\61\2\11\2\0\1\67"+
    "\2\11\2\67\1\61\3\67\1\107\1\11\6\67\1\110"+
    "\1\67\1\111\12\67\2\0\1\67\1\0\5\61\2\11"+
    "\2\0\1\67\2\11\2\67\1\61\4\67\1\11\3\67"+
    "\1\112\6\67\1\113\10\67\2\0\1\67\1\0\5\61"+
    "\2\11\2\0\1\67\2\11\2\67\1\61\4\67\1\11"+
    "\5\67\1\114\15\67\2\0\1\67\1\0\5\61\2\11"+
    "\2\0\1\67\2\11\2\67\1\61\4\67\1\11\4\67"+
    "\1\115\16\67\2\0\1\67\1\0\5\61\2\11\2\0"+
    "\1\67\2\11\2\67\1\61\4\67\1\11\16\67\1\116"+
    "\4\67\2\0\1\67\1\0\5\61\2\11\2\0\1\67"+
    "\2\11\2\67\1\61\2\67\1\117\1\120\1\11\13\67"+
    "\1\102\7\67\2\0\1\67\1\0\5\61\2\11\2\0"+
    "\1\67\2\11\2\67\1\61\4\67\1\11\5\67\1\121"+
    "\10\67\1\122\1\123\3\67\2\0\1\67\1\0\5\61"+
    "\2\11\2\0\1\67\2\11\2\67\1\61\2\67\1\124"+
    "\1\67\1\11\23\67\2\0\1\67\1\0\5\61\2\11"+
    "\2\0\1\67\2\11\2\67\1\61\4\67\1\11\7\67"+
    "\1\125\4\67\1\126\6\67\2\0\1\67\1\0\5\61"+
    "\2\11\2\0\1\67\2\11\2\67\1\61\4\67\1\11"+
    "\21\67\1\126\1\67\2\0\1\67\1\0\5\61\2\11"+
    "\2\0\1\67\2\11\2\67\1\61\4\67\1\11\4\67"+
    "\1\127\16\67\2\0\1\67\2\44\2\0\47\44\1\0"+
    "\5\130\4\0\2\45\3\0\1\130\4\0\1\131\50\0"+
    "\1\132\67\0\1\133\36\0\1\134\10\0\1\135\36\0"+
    "\1\136\62\0\1\41\54\0\1\137\51\0\1\140\33\0"+
    "\1\55\2\0\2\55\1\0\30\55\2\0\1\55\12\0"+
    "\1\55\2\0\2\55\1\0\14\55\1\141\13\55\2\0"+
    "\1\55\12\0\1\55\2\0\2\55\1\0\10\55\1\142"+
    "\17\55\2\0\1\55\12\0\1\55\2\0\2\55\1\0"+
    "\12\55\1\143\15\55\2\0\1\55\1\0\5\61\11\0"+
    "\1\61\1\144\32\0\2\62\2\0\50\62\1\63\2\61"+
    "\2\63\11\62\1\63\33\62\1\0\5\61\2\11\2\0"+
    "\1\65\1\16\1\66\2\11\1\61\4\11\1\70\23\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\1\145\4\11"+
    "\1\61\30\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\1\71\1\11\1\66\2\11\1\61\30\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\7\11\1\146"+
    "\17\11\1\147\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\2\11\1\150\25\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\3\11\1\151\1\11\1\61\6\11"+
    "\1\152\21\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\14\11\1\153\13\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\17\11\1\154\10\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\1\11\1\155\26\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\15\11\1\156\12\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\1\157\27\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\10\11\1\160\17\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\16\11\1\161\11\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\1\162\27\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\11\11\1\163\16\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\1\11\1\164\15\11\1\165\10\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\25\11\1\166\2\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\11\11\1\167\4\11\1\170\11\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\1\11\1\171\13\11\1\166\12\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\2\11\1\172\3\11"+
    "\1\173\21\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\2\11\1\174\25\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\7\11\1\175\20\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\2\11\1\176\25\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\30\11\2\0\1\177\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\10\11\1\200\17\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\10\11"+
    "\1\201\17\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\7\11\1\202\20\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\10\11\1\203\17\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\2\11\1\204\25\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\10\11\1\205\17\11\2\0\1\11"+
    "\1\0\5\130\11\0\1\130\4\0\1\131\27\0\5\131"+
    "\4\0\2\206\3\0\1\131\1\0\1\207\1\210\6\0"+
    "\1\211\70\0\1\212\26\0\1\133\64\0\1\213\45\0"+
    "\1\133\43\0\1\214\61\0\1\215\34\0\1\55\2\0"+
    "\2\55\1\0\15\55\1\216\12\55\2\0\1\55\12\0"+
    "\1\55\2\0\2\55\1\0\1\55\1\217\26\55\2\0"+
    "\1\55\21\0\1\220\32\0\5\61\2\11\2\0\1\145"+
    "\4\11\1\61\4\11\1\221\23\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\14\11\1\222\13\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\12\11\1\223\15\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\10\11\1\224\17\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\1\225\27\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\2\11\1\226\25\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\21\11\1\227\6\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\17\11\1\230"+
    "\10\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\4\11\1\231\23\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\10\11\1\232\5\11\1\233"+
    "\11\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\1\11\1\234\26\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\11\11\1\235\16\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\3\11\1\236\1\11"+
    "\1\61\30\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\16\11\1\237\11\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\21\11\1\240\6\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\11\11\1\241\16\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\3\11\1\242\24\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\11\11\1\102"+
    "\16\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\10\11\1\243\17\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\3\11\1\244\1\11\1\61\30\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\15\11"+
    "\1\245\12\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\2\11\1\246\25\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\14\11\1\247\13\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\15\11\1\250\12\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\21\11\1\251\6\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\11\11\1\252"+
    "\16\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\12\11\1\253\15\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\10\11\1\254\17\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\12\11"+
    "\1\255\15\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\11\11\1\256\16\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\14\11\1\257\13\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\1\260\27\11\2\0\1\11\12\0\2\206\76\0\1\261"+
    "\36\0\1\262\47\0\1\263\64\0\1\264\40\0\1\265"+
    "\54\0\1\266\31\0\5\61\2\11\2\0\1\267\4\11"+
    "\1\61\30\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\1\11\1\270\26\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\10\11\1\271\17\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\1\272\27\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\24\11\1\273\3\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\10\11\1\274\17\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\11\11\1\275\16\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\12\11\1\276\15\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\1\22\2\11\2\22\1\61"+
    "\4\22\1\11\23\22\2\0\1\22\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\12\11\1\277\15\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\6\11\1\300"+
    "\12\11\1\301\2\11\1\302\3\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\6\11\1\303\21\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\12\11\1\304\15\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\1\305\27\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\1\11\1\306\26\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\14\11\1\307\13\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\12\11\1\310\15\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\2\11\1\311"+
    "\25\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\7\11\1\312\2\11\1\304\15\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\24\11\1\313"+
    "\3\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\1\11\1\314\26\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\24\11\1\102\3\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\22\11"+
    "\1\315\5\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\10\11\1\316\17\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\3\11\1\317\1\11\1\61\30\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\11\11\1\320\16\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\1\102\27\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\3\11\1\321\24\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\15\11\1\322\12\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\7\11\1\323\20\11\2\0\1\11"+
    "\23\0\1\261\57\0\1\261\52\0\1\324\51\0\1\325"+
    "\44\0\1\326\32\0\5\61\2\11\2\0\5\11\1\61"+
    "\2\11\1\327\25\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\14\11\1\330\13\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\7\11\1\102"+
    "\20\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\10\11\1\331\17\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\7\11\1\332\20\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\6\11"+
    "\1\102\21\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\23\11\1\333\4\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\21\11\1\102\6\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\12\11\1\334\15\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\20\11\1\102\7\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\2\11\1\300"+
    "\25\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\10\11\1\335\17\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\15\11\1\336\12\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\10\11"+
    "\1\337\17\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\3\11\1\340\1\11\1\61\30\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\14\11\1\274\13\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\3\11\1\341\24\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\12\11\1\342\15\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\20\11\1\343"+
    "\7\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\11\11\1\344\16\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\14\11\1\345\13\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\11\11"+
    "\1\346\16\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\10\11\1\232\17\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\12\11\1\347\15\11"+
    "\2\0\1\11\32\0\1\350\40\0\1\351\33\0\5\61"+
    "\2\11\2\0\5\11\1\61\7\11\1\352\20\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\25\11"+
    "\1\102\2\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\1\11\1\353\26\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\15\11\1\102\12\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\10\11\1\102\17\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\13\11\1\344\14\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\12\11\1\354"+
    "\15\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\1\355\27\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\11\11\1\356\16\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\7\11\1\312"+
    "\2\11\1\357\15\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\1\11\1\360\26\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\3\11\1\361\1\11\1\61"+
    "\30\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\11\11\1\362\16\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\1\11\1\363\26\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\2\11"+
    "\1\364\25\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\14\11\1\365\13\11\2\0\1\11\34\0"+
    "\1\366\17\0\5\61\2\11\2\0\5\11\1\61\14\11"+
    "\1\367\13\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\1\370\27\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\14\11\1\102\13\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\10\11"+
    "\1\371\17\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\5\11\1\61\20\11\1\372\7\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\5\11\1\61\1\373\27\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\27\11"+
    "\1\255\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\10\11\1\374\17\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\1\375\27\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\1\376\27\11"+
    "\2\0\1\11\20\0\1\377\33\0\5\61\2\11\2\0"+
    "\5\11\1\61\11\11\1\u0100\16\11\2\0\1\11\1\0"+
    "\5\61\2\11\2\0\3\11\1\u0101\1\11\1\61\30\11"+
    "\2\0\1\11\1\0\5\61\2\11\2\0\5\11\1\61"+
    "\7\11\1\u0102\20\11\2\0\1\11\1\0\5\61\2\11"+
    "\2\0\5\11\1\61\10\11\1\u0103\17\11\2\0\1\11"+
    "\1\0\5\61\2\11\2\0\5\11\1\61\11\11\1\u0104"+
    "\16\11\2\0\1\11\1\0\5\61\2\11\2\0\5\11"+
    "\1\61\15\11\1\u0105\12\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\12\11\1\357\15\11\2\0"+
    "\1\11\1\0\5\61\2\11\2\0\5\11\1\61\3\11"+
    "\1\166\24\11\2\0\1\11\1\0\5\61\2\11\2\0"+
    "\4\11\1\102\1\61\30\11\2\0\1\11\1\0\5\61"+
    "\2\11\2\0\5\11\1\61\15\11\1\u0106\12\11\2\0"+
    "\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\6\1\1\11\24\1\2\11\16\1\1\0"+
    "\2\1\1\11\43\1\3\0\1\1\5\0\3\1\1\0"+
    "\42\1\4\0\2\11\1\0\2\1\1\0\40\1\1\11"+
    "\5\0\35\1\1\11\2\0\21\1\1\0\1\11\25\1"+
    "\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BrowserslistLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BrowserslistLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BrowserslistTypes.RBRACKET;
            } 
            // fall through
          case 38: break;
          case 2: 
            { yybegin(YYINITIAL); return BrowserslistTypes.EOL;
            } 
            // fall through
          case 39: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 4: 
            { return BrowserslistTypes.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 5: 
            { return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 42: break;
          case 6: 
            { return BrowserslistTypes.COMPARE;
            } 
            // fall through
          case 43: break;
          case 7: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 44: break;
          case 8: 
            { return BrowserslistTypes.INTEGER;
            } 
            // fall through
          case 45: break;
          case 9: 
            { yybegin(YYINITIAL); return BrowserslistTypes.OR;
            } 
            // fall through
          case 46: break;
          case 10: 
            { return BrowserslistTypes.LBRACKET;
            } 
            // fall through
          case 47: break;
          case 11: 
            { yybegin(YYINITIAL); return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 48: break;
          case 12: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSION;
            } 
            // fall through
          case 49: break;
          case 13: 
            { yybegin(YYINITIAL); return BrowserslistTypes.FEATURE;
            } 
            // fall through
          case 50: break;
          case 14: 
            { return BrowserslistTypes.PERCENT;
            } 
            // fall through
          case 51: break;
          case 15: 
            { return BrowserslistTypes.STATS;
            } 
            // fall through
          case 52: break;
          case 16: 
            { return BrowserslistTypes.FLOAT;
            } 
            // fall through
          case 53: break;
          case 17: 
            { yybegin(TARGET); return BrowserslistTypes.TARGET;
            } 
            // fall through
          case 54: break;
          case 18: 
            { return BrowserslistTypes.IN;
            } 
            // fall through
          case 55: break;
          case 19: 
            { return BrowserslistTypes.TIME;
            } 
            // fall through
          case 56: break;
          case 20: 
            { yybegin(YYINITIAL); return BrowserslistTypes.AND;
            } 
            // fall through
          case 57: break;
          case 21: 
            { yybegin(YYINITIAL); return BrowserslistTypes.NOT;
            } 
            // fall through
          case 58: break;
          case 22: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSIONS_RANGE;
            } 
            // fall through
          case 59: break;
          case 23: 
            { return BrowserslistTypes.LAST;
            } 
            // fall through
          case 60: break;
          case 24: 
            { return BrowserslistTypes.DEAD;
            } 
            // fall through
          case 61: break;
          case 25: 
            { return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 62: break;
          case 26: 
            { return BrowserslistTypes.YEARS;
            } 
            // fall through
          case 63: break;
          case 27: 
            { return BrowserslistTypes.SINCE;
            } 
            // fall through
          case 64: break;
          case 28: 
            { return BrowserslistTypes.COVER;
            } 
            // fall through
          case 65: break;
          case 29: 
            { yybegin(YYINITIAL); return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 66: break;
          case 30: 
            { return BrowserslistTypes.EXTENDS;
            } 
            // fall through
          case 67: break;
          case 31: 
            { return BrowserslistTypes.CURRENT_NODE_VERSION;
            } 
            // fall through
          case 68: break;
          case 32: 
            { return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 69: break;
          case 33: 
            { yybegin(YYINITIAL); return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 70: break;
          case 34: 
            { yybegin(SUPPORTS); return BrowserslistTypes.SUPPORTS;
            } 
            // fall through
          case 71: break;
          case 35: 
            { return BrowserslistTypes.DEFAULTS;
            } 
            // fall through
          case 72: break;
          case 36: 
            { return BrowserslistTypes.MAINTAINED_NODE_VERSIONS;
            } 
            // fall through
          case 73: break;
          case 37: 
            { return BrowserslistTypes.UNRELEASED;
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
