/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.aleksandrsl.intellijbrowserslist.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.aleksandrsl.intellijbrowserslist.psi.BrowserslistTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/aleksandrsl/Projects/intellij-browserslist/src/main/grammar/Browserslist.flex</tt>
 */
class BrowserslistLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TARGET = 2;
  public static final int SUPPORTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\5\1\2\1\1\1\6\1\3\22\4\1\5\2\4\1\7\1\4\1\14\6\4\1\0\1\24\1\13\1\4"+
    "\12\12\2\4\1\10\1\11\1\10\2\4\1\35\1\47\1\52\1\25\1\43\1\26\3\25\1\63\2\25"+
    "\1\45\1\61\1\42\1\62\1\57\1\64\1\41\1\25\1\56\5\25\4\4\1\40\1\4\1\22\1\46"+
    "\1\50\1\37\1\31\1\32\1\55\1\53\1\27\1\65\1\51\1\23\1\15\1\36\1\33\1\44\1\60"+
    "\1\30\1\20\1\21\1\54\1\66\1\25\1\34\1\16\1\25\12\4\1\1\12\4\1\17\11\4\1\25"+
    "\12\4\1\25\4\4\1\25\5\4\27\25\1\4\12\25\4\4\14\25\16\4\5\25\7\4\1\25\1\4\1"+
    "\25\1\4\5\25\1\4\2\25\2\4\4\25\1\4\1\25\6\4\1\25\1\4\3\25\1\4\1\25\1\4\4\25"+
    "\1\4\23\25\1\4\11\25\1\4\26\25\2\4\1\25\6\4\10\25\10\4\16\25\1\4\1\25\1\4"+
    "\2\25\1\4\2\25\1\4\1\25\10\4\13\25\5\4\3\25\15\4\12\12\4\4\6\25\1\4\10\25"+
    "\2\4\12\25\1\4\6\25\12\12\3\25\2\4\14\25\2\4\3\25\12\12\14\25\4\4\1\25\5\4"+
    "\16\25\2\4\14\25\4\4\5\25\1\4\10\25\6\4\20\25\2\4\12\12\1\25\2\4\16\25\1\4"+
    "\1\25\3\4\4\25\2\4\11\25\2\4\2\25\2\4\4\25\10\4\1\25\4\4\2\25\1\4\1\25\1\4"+
    "\3\25\1\4\6\25\4\4\2\25\1\4\2\25\1\4\2\25\1\4\2\25\2\4\1\25\1\4\5\25\4\4\2"+
    "\25\2\4\3\25\3\4\1\25\7\4\4\25\1\4\1\25\7\4\12\12\6\25\13\4\3\25\1\4\11\25"+
    "\1\4\2\25\1\4\2\25\1\4\5\25\2\4\12\25\1\4\3\25\1\4\3\25\2\4\1\25\30\4\1\25"+
    "\7\4\3\25\1\4\10\25\2\4\6\25\2\4\2\25\2\4\3\25\10\4\2\25\4\4\2\25\1\4\1\25"+
    "\1\4\1\25\20\4\2\25\1\4\6\25\3\4\3\25\1\4\4\25\3\4\2\25\1\4\1\25\1\4\2\25"+
    "\3\4\2\25\3\4\3\25\3\4\14\25\4\4\5\25\3\4\3\25\1\4\4\25\2\4\1\25\6\4\1\25"+
    "\10\4\4\25\1\4\10\25\1\4\3\25\1\4\30\25\3\4\10\25\1\4\3\25\1\4\4\25\7\4\2"+
    "\25\1\4\3\25\5\4\4\25\1\4\5\25\2\4\4\25\5\4\2\25\7\4\1\25\2\4\2\25\16\4\3"+
    "\25\1\4\10\25\1\4\7\25\1\4\3\25\1\4\5\25\5\4\4\25\7\4\1\25\12\4\6\25\2\4\2"+
    "\25\1\4\22\25\3\4\10\25\1\4\11\25\1\4\1\25\2\4\7\25\3\4\1\25\4\4\6\25\1\4"+
    "\1\25\1\4\10\25\2\4\2\25\14\4\17\25\1\4\12\12\7\4\2\25\1\4\1\25\2\4\2\25\1"+
    "\4\1\25\2\4\1\25\6\4\4\25\1\4\7\25\1\4\3\25\1\4\1\25\1\4\1\25\2\4\2\25\1\4"+
    "\15\25\1\4\3\25\2\4\5\25\1\4\1\25\1\4\6\25\2\4\12\12\2\4\4\25\10\4\2\25\13"+
    "\4\1\25\1\4\1\25\1\4\1\25\4\4\12\25\1\4\24\25\3\4\5\25\1\4\12\25\6\4\1\25"+
    "\11\4\12\12\4\25\2\4\6\25\1\4\1\25\5\4\1\25\2\4\13\25\1\4\15\25\1\4\4\25\2"+
    "\4\7\25\1\4\1\25\1\4\4\25\2\4\1\25\1\4\4\25\2\4\7\25\1\4\1\25\1\4\4\25\2\4"+
    "\16\25\2\4\6\25\2\4\15\25\2\4\1\25\1\17\32\25\3\4\13\25\7\4\15\25\1\4\7\25"+
    "\13\4\4\25\14\4\1\25\1\4\2\25\14\4\4\25\3\4\1\25\4\4\2\25\15\4\3\25\2\4\12"+
    "\25\15\4\1\25\23\4\5\25\12\12\3\4\6\25\1\4\23\25\1\4\2\25\6\4\6\25\5\4\15"+
    "\25\1\4\1\25\1\4\1\25\1\4\1\25\1\4\6\25\1\4\7\25\1\4\1\25\3\4\3\25\1\4\7\25"+
    "\3\4\4\25\2\4\6\25\4\4\13\17\15\4\2\1\5\4\1\17\17\4\1\25\4\4\1\25\12\4\1\17"+
    "\1\4\1\25\15\4\1\25\2\4\1\25\4\4\1\25\2\4\12\25\1\4\1\25\3\4\5\25\6\4\1\25"+
    "\1\4\1\25\1\4\1\25\1\4\4\25\1\4\13\25\2\4\4\25\5\4\5\25\4\4\1\25\7\4\17\25"+
    "\6\4\15\25\7\4\10\25\11\4\7\25\1\4\7\25\1\4\1\17\4\4\3\25\11\4\5\25\2\4\5"+
    "\25\3\4\7\25\2\4\2\25\2\4\3\25\5\4\13\25\12\12\2\25\4\4\3\25\1\4\12\25\1\4"+
    "\1\25\7\4\11\25\2\4\27\25\2\4\15\25\3\4\1\25\1\4\1\25\2\4\1\25\16\4\1\25\12"+
    "\12\5\25\3\4\5\25\12\4\6\25\2\4\6\25\2\4\6\25\11\4\13\25\1\4\2\25\2\4\7\25"+
    "\4\4\5\25\3\4\5\25\5\4\12\25\1\4\5\25\1\4\1\25\1\4\2\25\1\4\2\25\1\4\12\25"+
    "\3\4\15\25\3\4\2\25\30\4\16\25\4\4\1\25\2\4\6\25\2\4\6\25\2\4\6\25\2\4\3\25"+
    "\3\4\14\25\1\4\16\25\1\4\2\25\1\4\1\25\15\4\1\25\2\4\4\25\4\4\10\25\1\4\5"+
    "\25\12\4\6\25\2\4\1\25\1\4\14\25\1\4\2\25\3\4\1\25\2\4\4\25\1\4\2\25\12\4"+
    "\10\25\6\4\6\25\1\4\2\25\5\4\10\25\1\4\3\25\1\4\13\25\4\4\3\25\4\4\6\25\1"+
    "\4\12\12\4\25\2\4\1\25\11\4\5\25\5\4\3\25\3\4\12\12\1\25\1\4\1\25\3\4\10\25"+
    "\6\4\1\25\1\4\7\25\1\4\1\25\1\4\4\25\1\4\2\25\6\4\1\25\5\4\7\25\2\4\7\25\3"+
    "\4\6\25\1\4\1\25\10\4\6\25\2\4\10\25\10\4\6\25\2\4\1\25\3\4\1\25\13\4\10\25"+
    "\5\4\15\25\3\4\2\25\6\4\5\25\3\4\6\25\10\4\10\25\2\4\7\25\16\4\4\25\4\4\3"+
    "\25\15\4\1\25\2\4\2\25\2\4\4\25\1\4\14\25\1\4\1\25\1\4\7\25\1\4\21\25\1\4"+
    "\4\25\2\4\10\25\1\4\7\25\1\4\14\25\1\4\4\25\1\4\5\25\1\4\1\25\3\4\11\25\1"+
    "\4\10\25\2\4\22\12\5\4\1\25\16\4\1\25\13\4\2\25\1\4\2\25\1\4\5\25\6\4\2\25"+
    "\1\4\1\25\2\4\1\25\1\4\12\25\1\4\4\25\1\4\1\25\1\4\1\25\6\4\1\25\4\4\1\25"+
    "\1\4\1\25\1\4\1\25\1\4\3\25\1\4\2\25\1\4\1\25\2\4\1\25\1\4\1\25\1\4\1\25\1"+
    "\4\1\25\1\4\1\25\1\4\2\25\1\4\1\25\2\4\4\25\1\4\7\25\1\4\4\25\1\4\4\25\1\4"+
    "\1\25\1\4\12\25\1\4\5\25\1\4\3\25\1\4\5\25\1\4\5\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\3\3\1\10\32\3\1\11\3\12\1\13\1\6"+
    "\1\14\10\10\1\15\1\0\2\5\1\6\1\7\1\16"+
    "\1\17\1\3\1\20\10\17\1\21\1\17\1\22\3\17"+
    "\1\21\1\1\24\17\1\6\3\0\1\14\7\0\1\23"+
    "\6\3\1\24\10\3\1\25\21\3\1\26\5\0\1\27"+
    "\1\30\2\0\10\3\1\31\7\3\1\32\17\3\1\26"+
    "\6\0\1\23\1\3\1\33\1\34\1\35\23\3\1\36"+
    "\4\3\1\37\2\0\16\3\1\21\2\3\1\0\1\17"+
    "\3\3\1\40\5\3\1\41\1\3\1\42\1\43\1\3"+
    "\1\44\1\45\1\3\1\21\3\3\1\42\1\43\5\3"+
    "\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\245\0\334\0\u0113\0\u014a"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\245"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\245\0\245\0\u0861\0\u014a\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0113\0\u0bd1\0\u0113"+
    "\0\u0113\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0113\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0113\0\u0113\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\245"+
    "\0\u138d\0\u13c4\0\u13fb\0\u138d\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u0113\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\245\0\245\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u0113"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u0113"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u0f78\0\u2486\0\245"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u1e82\0\u2607"+
    "\0\u0113\0\u0113\0\u0113\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a"+
    "\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u0113\0\u2a53"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\245\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u12b1\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\245\0\u2f44\0\u2f7b\0\u2fb2\0\u0113\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u0113\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u0113"+
    "\0\u0113\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u0113\0\245"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u0113\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\7\1\14\1\15\1\7\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\7\1\22\1\25\1\26\1\22"+
    "\1\27\1\30\1\31\1\22\1\32\1\33\1\34\1\22"+
    "\1\35\1\36\1\37\1\40\1\22\1\41\1\42\1\43"+
    "\1\44\1\45\1\22\1\46\1\22\1\47\1\50\1\22"+
    "\1\51\1\40\3\22\1\52\1\53\2\54\1\55\1\20"+
    "\1\10\1\56\1\57\1\60\1\20\2\61\1\20\1\62"+
    "\3\20\1\63\1\64\6\20\1\65\1\20\1\66\2\20"+
    "\1\67\4\20\1\70\22\20\1\71\1\20\2\54\1\55"+
    "\1\20\1\10\1\56\1\57\2\20\1\72\2\20\2\72"+
    "\1\20\47\72\71\0\1\5\65\0\3\73\1\7\2\73"+
    "\10\7\1\73\47\7\5\0\2\10\60\0\1\74\1\75"+
    "\2\73\1\12\2\75\10\12\1\75\47\12\1\0\3\73"+
    "\1\7\2\73\2\7\1\76\5\7\1\73\47\7\1\0"+
    "\3\73\1\7\2\73\3\7\1\77\1\15\1\100\2\101"+
    "\1\73\4\101\1\102\42\101\1\0\3\73\1\7\2\73"+
    "\3\7\1\103\4\7\1\73\47\7\1\0\3\73\1\7"+
    "\2\73\3\7\1\101\2\7\2\101\1\73\2\101\1\104"+
    "\1\101\1\7\42\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\4\101\1\105"+
    "\35\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\2\101\1\106\24\101\1\107"+
    "\12\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\42\101\1\0\3\73\1\7"+
    "\2\73\3\7\1\101\2\7\2\101\1\73\3\101\1\110"+
    "\1\7\11\101\1\111\30\101\1\0\3\73\1\7\2\73"+
    "\3\7\1\101\2\7\2\101\1\73\2\101\1\112\1\101"+
    "\1\7\42\101\1\0\3\73\1\7\2\73\3\7\1\101"+
    "\2\7\2\101\1\73\4\101\1\7\2\101\1\113\37\101"+
    "\1\0\3\73\1\7\2\73\3\7\1\101\2\7\2\101"+
    "\1\73\4\101\1\7\4\101\1\114\1\101\1\115\2\101"+
    "\1\116\3\101\1\117\24\101\1\0\3\73\1\7\2\73"+
    "\3\7\1\101\2\7\2\101\1\73\3\101\1\120\1\7"+
    "\7\101\1\121\32\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\5\101\1\122"+
    "\1\101\1\122\32\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\3\101\1\123"+
    "\13\101\1\124\22\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\11\101\1\125"+
    "\30\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\6\101\1\126\33\101\1\0"+
    "\3\73\1\7\2\73\3\7\1\101\2\7\2\101\1\73"+
    "\4\101\1\7\4\101\1\127\35\101\1\0\3\73\1\7"+
    "\2\73\3\7\1\101\2\7\2\101\1\73\2\101\1\130"+
    "\1\101\1\7\42\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\17\101\1\131"+
    "\22\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\7\101\1\132\2\101\1\133"+
    "\27\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\26\101\1\134\13\101\1\0"+
    "\3\73\1\7\2\73\3\7\1\101\2\7\2\101\1\73"+
    "\4\101\1\7\21\101\1\122\20\101\1\0\3\73\1\7"+
    "\2\73\3\7\1\101\2\7\2\101\1\73\2\101\1\135"+
    "\1\136\1\7\42\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\6\101\1\137"+
    "\20\101\1\140\12\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\2\101\1\141\1\101\1\7"+
    "\42\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\26\101\1\142\13\101\1\0"+
    "\3\73\1\7\2\73\3\7\1\101\2\7\2\101\1\73"+
    "\4\101\1\7\11\101\1\143\30\101\1\0\3\73\1\7"+
    "\2\73\3\7\1\101\2\7\2\101\1\73\4\101\1\7"+
    "\25\101\1\144\14\101\1\0\3\73\1\7\2\73\3\7"+
    "\1\101\2\7\2\101\1\73\4\101\1\7\32\101\1\145"+
    "\7\101\1\0\3\73\1\7\2\73\3\7\1\101\2\7"+
    "\2\101\1\73\4\101\1\7\6\101\1\146\33\101\1\0"+
    "\3\73\1\7\2\73\3\7\1\101\2\7\2\101\1\73"+
    "\4\101\1\7\4\101\1\147\35\101\2\0\1\54\64\0"+
    "\2\57\2\0\63\57\11\0\1\150\56\0\3\151\1\0"+
    "\2\151\3\0\2\61\3\0\1\151\4\0\1\152\64\0"+
    "\1\153\110\0\1\154\45\0\1\155\12\0\1\156\50\0"+
    "\1\157\76\0\1\53\71\0\1\160\74\0\1\161\56\0"+
    "\1\162\47\0\1\72\2\0\2\72\1\0\47\72\1\0"+
    "\3\73\1\0\2\73\10\0\1\73\1\163\46\0\2\74"+
    "\2\0\64\74\1\75\2\73\1\74\2\75\10\74\1\75"+
    "\47\74\1\0\3\73\1\7\2\73\3\7\1\77\1\15"+
    "\1\100\2\7\1\73\4\7\1\102\42\7\1\0\3\73"+
    "\1\7\2\73\3\7\1\164\4\7\1\73\47\7\1\0"+
    "\3\73\1\7\2\73\3\7\1\103\1\7\1\100\2\7"+
    "\1\73\47\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\7\7\1\165\35\7\1\166\1\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\2\7\1\167\44\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\16\7\1\170\30\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\24\7\1\171\22\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\1\7\1\172"+
    "\45\7\1\0\3\73\1\7\2\73\10\7\1\73\17\7"+
    "\1\173\27\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\1\174\46\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\10\7\1\175\36\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\20\7\1\176\26\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\1\177\46\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\21\7\1\122\25\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\11\7\1\200\35\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\1\7\1\201\45\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\20\7\1\202\26\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\17\7\1\203"+
    "\27\7\1\0\3\73\1\7\2\73\10\7\1\73\1\7"+
    "\1\204\15\7\1\205\27\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\2\7\1\206\7\7\1\207\34\7\1\0"+
    "\3\73\1\7\2\73\6\7\1\210\1\7\1\73\12\7"+
    "\1\211\34\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\11\7\1\212\35\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\24\7\1\213\22\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\35\7\1\205\11\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\2\7\1\214\44\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\7\7\1\215\37\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\2\7\1\216\44\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\46\7\1\217"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\10\7\1\220"+
    "\36\7\1\0\3\73\1\7\2\73\10\7\1\73\7\7"+
    "\1\221\37\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\10\7\1\222\36\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\10\7\1\223\36\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\15\7\1\224\31\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\2\7\1\224\44\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\17\7\1\205\27\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\10\7\1\225\36\7"+
    "\1\0\3\151\1\0\2\151\10\0\1\151\4\0\1\152"+
    "\43\0\3\152\1\0\2\152\3\0\2\226\3\0\1\152"+
    "\1\0\1\227\1\230\6\0\1\231\11\0\1\232\110\0"+
    "\1\233\24\0\1\154\102\0\1\234\57\0\1\154\57\0"+
    "\1\235\131\0\1\154\32\0\1\236\57\0\1\237\46\0"+
    "\3\73\1\7\2\73\3\7\1\164\4\7\1\73\4\7"+
    "\1\240\42\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\16\7\1\241\30\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\13\7\1\242\33\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\10\7\1\243\36\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\30\7\1\244\16\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\24\7\1\245\22\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\4\7\1\246\42\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\20\7\1\247"+
    "\26\7\1\0\3\73\1\7\2\73\10\7\1\73\1\7"+
    "\1\250\45\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\11\7\1\251\35\7\1\0\3\73\1\7\2\73\6\7"+
    "\1\252\1\7\1\73\47\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\20\7\1\253\26\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\30\7\1\254\16\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\11\7\1\255\35\7\1\0"+
    "\3\73\1\7\2\73\6\7\1\256\1\7\1\73\47\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\10\7\1\257"+
    "\36\7\1\0\3\73\1\7\2\73\10\7\1\73\11\7"+
    "\1\122\35\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\17\7\1\260\27\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\2\7\1\261\44\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\1\262\46\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\2\7\1\263\44\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\10\7\1\264\36\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\3\7\1\265\43\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\16\7\1\266\30\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\17\7\1\267"+
    "\27\7\1\0\3\73\1\7\2\73\10\7\1\73\30\7"+
    "\1\270\16\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\11\7\1\271\35\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\10\7\1\272\36\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\13\7\1\273\33\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\13\7\1\274\33\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\11\7\1\275\35\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\16\7\1\276\30\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\1\277\46\7"+
    "\12\0\2\226\117\0\1\300\45\0\1\301\63\0\1\302"+
    "\107\0\1\303\60\0\1\304\53\0\1\305\70\0\1\306"+
    "\45\0\3\73\1\7\2\73\3\7\1\307\4\7\1\73"+
    "\47\7\1\0\3\73\1\7\2\73\10\7\1\73\1\7"+
    "\1\310\45\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\10\7\1\311\36\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\1\312\46\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\11\7\1\313\35\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\13\7\1\314\33\7\1\0\3\73\1\7"+
    "\2\73\3\7\1\22\2\7\2\22\1\73\4\22\1\7"+
    "\42\22\1\0\3\73\1\7\2\73\10\7\1\73\12\7"+
    "\1\315\15\7\1\316\3\7\1\317\3\7\1\320\6\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\12\7\1\321"+
    "\34\7\1\0\3\73\1\7\2\73\10\7\1\73\13\7"+
    "\1\322\33\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\1\323\46\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\1\7\1\324\45\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\16\7\1\325\30\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\7\7\1\326\3\7\1\322\33\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\13\7\1\327\33\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\34\7\1\330"+
    "\12\7\1\0\3\73\1\7\2\73\10\7\1\73\34\7"+
    "\1\331\12\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\10\7\1\332\36\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\2\7\1\333\6\7\1\122\35\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\13\7\1\334\33\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\1\7\1\335\45\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\34\7\1\122"+
    "\12\7\1\0\3\73\1\7\2\73\10\7\1\73\31\7"+
    "\1\336\15\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\10\7\1\337\36\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\11\7\1\340\35\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\1\122\46\7\1\0\3\73\1\7\2\73"+
    "\6\7\1\341\1\7\1\73\47\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\3\7\1\342\43\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\7\7\1\343\37\7\23\0"+
    "\1\300\73\0\1\300\122\0\1\300\32\0\1\344\65\0"+
    "\1\345\60\0\1\346\46\0\3\73\1\7\2\73\10\7"+
    "\1\73\2\7\1\347\44\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\10\7\1\350\36\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\12\7\1\122\34\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\33\7\1\351\13\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\30\7\1\122\16\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\40\7\1\122"+
    "\6\7\1\0\3\73\1\7\2\73\10\7\1\73\13\7"+
    "\1\352\33\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\26\7\1\122\20\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\2\7\1\315\44\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\10\7\1\353\36\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\17\7\1\354\27\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\16\7\1\332\30\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\7\7\1\355\37\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\3\7\1\356"+
    "\43\7\1\0\3\73\1\7\2\73\10\7\1\73\16\7"+
    "\1\357\30\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\7\7\1\122\37\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\25\7\1\360\21\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\10\7\1\361\36\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\13\7\1\362\33\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\27\7\1\363\17\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\16\7\1\364\30\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\11\7\1\365"+
    "\35\7\1\0\3\73\1\7\2\73\10\7\1\73\11\7"+
    "\1\366\35\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\13\7\1\367\33\7\33\0\1\370\53\0\1\371\47\0"+
    "\3\73\1\7\2\73\10\7\1\73\7\7\1\372\37\7"+
    "\1\0\3\73\1\7\2\73\10\7\1\73\1\7\1\373"+
    "\45\7\1\0\3\73\1\7\2\73\10\7\1\73\10\7"+
    "\1\122\36\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\14\7\1\365\32\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\13\7\1\374\33\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\1\375\46\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\17\7\1\122\27\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\1\7\1\376\45\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\35\7\1\122\11\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\7\7\1\326\3\7"+
    "\1\377\33\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\11\7\1\u0100\35\7\1\0\3\73\1\7\2\73\6\7"+
    "\1\u0101\1\7\1\73\47\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\11\7\1\u0102\35\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\1\7\1\u0103\45\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\2\7\1\u0104\44\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\16\7\1\u0105\30\7"+
    "\36\0\1\u0106\31\0\3\73\1\7\2\73\10\7\1\73"+
    "\16\7\1\u0107\30\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\1\u0108\46\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\16\7\1\122\30\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\1\u0109\46\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\26\7\1\u010a\20\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\10\7\1\u010b\36\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\43\7\1\u010c\1\7\1\u010c"+
    "\1\7\1\0\3\73\1\7\2\73\10\7\1\73\10\7"+
    "\1\u010d\36\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\1\u010e\46\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\1\u010f\46\7\20\0\1\u0110\47\0\3\73\1\7\2\73"+
    "\10\7\1\73\11\7\1\u0111\35\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\7\7\1\u0112\37\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\25\7\1\u0113\21\7\1\0"+
    "\3\73\1\7\2\73\10\7\1\73\1\122\20\7\1\122"+
    "\25\7\1\0\3\73\1\7\2\73\10\7\1\73\10\7"+
    "\1\u0114\36\7\1\0\3\73\1\7\2\73\10\7\1\73"+
    "\11\7\1\u0115\35\7\1\0\3\73\1\7\2\73\10\7"+
    "\1\73\17\7\1\u0116\27\7\1\0\3\73\1\7\2\73"+
    "\10\7\1\73\3\7\1\205\43\7\1\0\3\73\1\7"+
    "\2\73\10\7\1\73\13\7\1\377\33\7\1\0\3\73"+
    "\1\7\2\73\7\7\1\122\1\73\47\7\1\0\3\73"+
    "\1\7\2\73\10\7\1\73\17\7\1\u0117\27\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\1\11\32\1\2\11\16\1\1\0"+
    "\54\1\1\11\3\0\1\1\7\0\43\1\5\0\2\11"+
    "\2\0\40\1\1\11\6\0\35\1\1\11\2\0\21\1"+
    "\1\0\1\11\26\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BrowserslistLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BrowserslistLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BrowserslistTypes.OR;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return BrowserslistTypes.EOL;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return BrowserslistTypes.IDENTIFIER;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return BrowserslistTypes.COMPARE;
            } 
            // fall through
          case 45: break;
          case 7: 
            { return BrowserslistTypes.INTEGER;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 47: break;
          case 9: 
            { yybegin(YYINITIAL); return BrowserslistTypes.OR;
            } 
            // fall through
          case 48: break;
          case 10: 
            { yybegin(YYINITIAL); return BrowserslistTypes.EOL;
            } 
            // fall through
          case 49: break;
          case 11: 
            { yybegin(YYINITIAL); return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 50: break;
          case 12: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSION;
            } 
            // fall through
          case 51: break;
          case 13: 
            { yybegin(YYINITIAL); return BrowserslistTypes.FEATURE;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return BrowserslistTypes.PERCENT;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return BrowserslistTypes.STATS;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return BrowserslistTypes.FLOAT;
            } 
            // fall through
          case 55: break;
          case 17: 
            { yybegin(TARGET); return BrowserslistTypes.TARGET;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return BrowserslistTypes.IN;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return BrowserslistTypes.TIME;
            } 
            // fall through
          case 58: break;
          case 20: 
            { return BrowserslistTypes.AND;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return BrowserslistTypes.NOT;
            } 
            // fall through
          case 60: break;
          case 22: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSIONS_RANGE;
            } 
            // fall through
          case 61: break;
          case 23: 
            { yybegin(YYINITIAL); return BrowserslistTypes.AND;
            } 
            // fall through
          case 62: break;
          case 24: 
            { yybegin(YYINITIAL); return BrowserslistTypes.NOT;
            } 
            // fall through
          case 63: break;
          case 25: 
            { return BrowserslistTypes.LAST;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return BrowserslistTypes.DEAD;
            } 
            // fall through
          case 65: break;
          case 27: 
            { return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return BrowserslistTypes.YEARS;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return BrowserslistTypes.SINCE;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return BrowserslistTypes.COVER;
            } 
            // fall through
          case 69: break;
          case 31: 
            { yybegin(YYINITIAL); return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 70: break;
          case 32: 
            { return BrowserslistTypes.EXTENDS;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return BrowserslistTypes.CURRENT_NODE_VERSION;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 73: break;
          case 35: 
            { yybegin(YYINITIAL); return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 74: break;
          case 36: 
            { yybegin(SUPPORTS); return BrowserslistTypes.SUPPORTS;
            } 
            // fall through
          case 75: break;
          case 37: 
            { return BrowserslistTypes.DEFAULTS;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return BrowserslistTypes.MAINTAINED_NODE_VERSIONS;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return BrowserslistTypes.UNRELEASED;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
