/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.aleksandrsl.intellijbrowserslist.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.aleksandrsl.intellijbrowserslist.psi.BrowserslistTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/aleksandrsl/Projects/intellij-browserslist/src/main/grammar/Browserslist.flex</tt>
 */
class BrowserslistLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TARGET = 2;
  public static final int SUPPORTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\4\1\2\1\1\1\5\1\3\22\6\1\4\2\6\1\7\1\6\1\14\6\6\1\65\1\24\1\13\1\6"+
    "\12\12\2\6\1\10\1\11\1\10\2\6\1\35\1\47\1\52\1\25\1\43\1\26\3\25\1\63\2\25"+
    "\1\45\1\61\1\42\1\62\1\57\1\64\1\41\1\25\1\56\5\25\1\66\1\6\1\0\1\6\1\40\1"+
    "\6\1\22\1\46\1\50\1\37\1\31\1\32\1\55\1\53\1\27\1\67\1\51\1\23\1\15\1\36\1"+
    "\33\1\44\1\60\1\30\1\20\1\21\1\54\1\70\1\25\1\34\1\16\1\25\12\6\1\1\12\6\1"+
    "\17\11\6\1\25\12\6\1\25\4\6\1\25\5\6\27\25\1\6\12\25\4\6\14\25\16\6\5\25\7"+
    "\6\1\25\1\6\1\25\1\6\5\25\1\6\2\25\2\6\4\25\1\6\1\25\6\6\1\25\1\6\3\25\1\6"+
    "\1\25\1\6\4\25\1\6\23\25\1\6\11\25\1\6\26\25\2\6\1\25\6\6\10\25\10\6\16\25"+
    "\1\6\1\25\1\6\2\25\1\6\2\25\1\6\1\25\10\6\13\25\5\6\3\25\15\6\12\12\4\6\6"+
    "\25\1\6\10\25\2\6\12\25\1\6\6\25\12\12\3\25\2\6\14\25\2\6\3\25\12\12\14\25"+
    "\4\6\1\25\5\6\16\25\2\6\14\25\4\6\5\25\1\6\10\25\6\6\20\25\2\6\12\12\1\25"+
    "\2\6\16\25\1\6\1\25\3\6\4\25\2\6\11\25\2\6\2\25\2\6\4\25\10\6\1\25\4\6\2\25"+
    "\1\6\1\25\1\6\3\25\1\6\6\25\4\6\2\25\1\6\2\25\1\6\2\25\1\6\2\25\2\6\1\25\1"+
    "\6\5\25\4\6\2\25\2\6\3\25\3\6\1\25\7\6\4\25\1\6\1\25\7\6\12\12\6\25\13\6\3"+
    "\25\1\6\11\25\1\6\2\25\1\6\2\25\1\6\5\25\2\6\12\25\1\6\3\25\1\6\3\25\2\6\1"+
    "\25\30\6\1\25\7\6\3\25\1\6\10\25\2\6\6\25\2\6\2\25\2\6\3\25\10\6\2\25\4\6"+
    "\2\25\1\6\1\25\1\6\1\25\20\6\2\25\1\6\6\25\3\6\3\25\1\6\4\25\3\6\2\25\1\6"+
    "\1\25\1\6\2\25\3\6\2\25\3\6\3\25\3\6\14\25\4\6\5\25\3\6\3\25\1\6\4\25\2\6"+
    "\1\25\6\6\1\25\10\6\4\25\1\6\10\25\1\6\3\25\1\6\30\25\3\6\10\25\1\6\3\25\1"+
    "\6\4\25\7\6\2\25\1\6\3\25\5\6\4\25\1\6\5\25\2\6\4\25\5\6\2\25\7\6\1\25\2\6"+
    "\2\25\16\6\3\25\1\6\10\25\1\6\7\25\1\6\3\25\1\6\5\25\5\6\4\25\7\6\1\25\12"+
    "\6\6\25\2\6\2\25\1\6\22\25\3\6\10\25\1\6\11\25\1\6\1\25\2\6\7\25\3\6\1\25"+
    "\4\6\6\25\1\6\1\25\1\6\10\25\2\6\2\25\14\6\17\25\1\6\12\12\7\6\2\25\1\6\1"+
    "\25\2\6\2\25\1\6\1\25\2\6\1\25\6\6\4\25\1\6\7\25\1\6\3\25\1\6\1\25\1\6\1\25"+
    "\2\6\2\25\1\6\15\25\1\6\3\25\2\6\5\25\1\6\1\25\1\6\6\25\2\6\12\12\2\6\4\25"+
    "\10\6\2\25\13\6\1\25\1\6\1\25\1\6\1\25\4\6\12\25\1\6\24\25\3\6\5\25\1\6\12"+
    "\25\6\6\1\25\11\6\12\12\4\25\2\6\6\25\1\6\1\25\5\6\1\25\2\6\13\25\1\6\15\25"+
    "\1\6\4\25\2\6\7\25\1\6\1\25\1\6\4\25\2\6\1\25\1\6\4\25\2\6\7\25\1\6\1\25\1"+
    "\6\4\25\2\6\16\25\2\6\6\25\2\6\15\25\2\6\1\25\1\17\32\25\3\6\13\25\7\6\15"+
    "\25\1\6\7\25\13\6\4\25\14\6\1\25\1\6\2\25\14\6\4\25\3\6\1\25\4\6\2\25\15\6"+
    "\3\25\2\6\12\25\15\6\1\25\23\6\5\25\12\12\3\6\6\25\1\6\23\25\1\6\2\25\6\6"+
    "\6\25\5\6\15\25\1\6\1\25\1\6\1\25\1\6\1\25\1\6\6\25\1\6\7\25\1\6\1\25\3\6"+
    "\3\25\1\6\7\25\3\6\4\25\2\6\6\25\4\6\13\17\15\6\2\1\5\6\1\17\17\6\1\25\4\6"+
    "\1\25\12\6\1\17\1\6\1\25\15\6\1\25\2\6\1\25\4\6\1\25\2\6\12\25\1\6\1\25\3"+
    "\6\5\25\6\6\1\25\1\6\1\25\1\6\1\25\1\6\4\25\1\6\13\25\2\6\4\25\5\6\5\25\4"+
    "\6\1\25\7\6\17\25\6\6\15\25\7\6\10\25\11\6\7\25\1\6\7\25\1\6\1\17\4\6\3\25"+
    "\11\6\5\25\2\6\5\25\3\6\7\25\2\6\2\25\2\6\3\25\5\6\13\25\12\12\2\25\4\6\3"+
    "\25\1\6\12\25\1\6\1\25\7\6\11\25\2\6\27\25\2\6\15\25\3\6\1\25\1\6\1\25\2\6"+
    "\1\25\16\6\1\25\12\12\5\25\3\6\5\25\12\6\6\25\2\6\6\25\2\6\6\25\11\6\13\25"+
    "\1\6\2\25\2\6\7\25\4\6\5\25\3\6\5\25\5\6\12\25\1\6\5\25\1\6\1\25\1\6\2\25"+
    "\1\6\2\25\1\6\12\25\3\6\15\25\3\6\2\25\30\6\16\25\4\6\1\25\2\6\6\25\2\6\6"+
    "\25\2\6\6\25\2\6\3\25\3\6\14\25\1\6\16\25\1\6\2\25\1\6\1\25\15\6\1\25\2\6"+
    "\4\25\4\6\10\25\1\6\5\25\12\6\6\25\2\6\1\25\1\6\14\25\1\6\2\25\3\6\1\25\2"+
    "\6\4\25\1\6\2\25\12\6\10\25\6\6\6\25\1\6\2\25\5\6\10\25\1\6\3\25\1\6\13\25"+
    "\4\6\3\25\4\6\6\25\1\6\12\12\4\25\2\6\1\25\11\6\5\25\5\6\3\25\3\6\12\12\1"+
    "\25\1\6\1\25\3\6\10\25\6\6\1\25\1\6\7\25\1\6\1\25\1\6\4\25\1\6\2\25\6\6\1"+
    "\25\5\6\7\25\2\6\7\25\3\6\6\25\1\6\1\25\10\6\6\25\2\6\10\25\10\6\6\25\2\6"+
    "\1\25\3\6\1\25\13\6\10\25\5\6\15\25\3\6\2\25\6\6\5\25\3\6\6\25\10\6\10\25"+
    "\2\6\7\25\16\6\4\25\4\6\3\25\15\6\1\25\2\6\2\25\2\6\4\25\1\6\14\25\1\6\1\25"+
    "\1\6\7\25\1\6\21\25\1\6\4\25\2\6\10\25\1\6\7\25\1\6\14\25\1\6\4\25\1\6\5\25"+
    "\1\6\1\25\3\6\11\25\1\6\10\25\2\6\22\12\5\6\1\25\16\6\1\25\13\6\2\25\1\6\2"+
    "\25\1\6\5\25\6\6\2\25\1\6\1\25\2\6\1\25\1\6\12\25\1\6\4\25\1\6\1\25\1\6\1"+
    "\25\6\6\1\25\4\6\1\25\1\6\1\25\1\6\1\25\1\6\3\25\1\6\2\25\1\6\1\25\2\6\1\25"+
    "\1\6\1\25\1\6\1\25\1\6\1\25\1\6\1\25\1\6\2\25\1\6\1\25\2\6\4\25\1\6\7\25\1"+
    "\6\4\25\1\6\4\25\1\6\1\25\1\6\12\25\1\6\5\25\1\6\3\25\1\6\5\25\1\6\5\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\34\4\1\11\1\12\1\4\1\13\1\14"+
    "\10\7\4\15\1\0\2\5\1\6\1\10\1\16\1\17"+
    "\1\4\1\20\10\17\1\21\1\17\1\22\3\17\1\21"+
    "\1\11\23\17\3\0\1\14\6\0\1\15\1\11\1\15"+
    "\1\0\1\23\6\4\1\24\10\4\1\25\21\4\1\26"+
    "\5\0\1\24\1\25\1\0\1\24\1\25\1\0\10\4"+
    "\1\27\7\4\1\30\17\4\1\26\6\0\1\23\1\4"+
    "\1\31\1\32\1\33\17\4\1\21\3\4\1\34\4\4"+
    "\1\35\2\0\16\4\1\21\2\4\1\0\1\17\3\4"+
    "\1\36\5\4\1\37\1\4\1\40\1\41\1\4\1\42"+
    "\1\43\1\4\1\21\3\4\1\40\1\41\5\4\1\44"+
    "\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\253\0\344\0\u011d\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\253\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\253\0\253\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\253\0\u0c78\0\u0156"+
    "\0\u0156\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0156\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u0156\0\u0156\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u1443\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u0ae9\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u0156\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\253\0\253\0\u1f9e\0\u0ae9"+
    "\0\u0ae9\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u0156\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u0156\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613"+
    "\0\u1041\0\u264c\0\253\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u2010\0\u27db\0\u0156\0\u0156\0\u0156\0\u2814\0\u284d"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\u0156\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\253\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u1398"+
    "\0\u30c3\0\u30fc\0\u3135\0\253\0\u316e\0\u31a7\0\u31e0\0\u0156"+
    "\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u0156\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u0156\0\u0156\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u0156\0\253\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\u0156\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\11\1\17\1\20\1\14\1\21"+
    "\1\22\1\23\1\24\1\11\1\22\1\25\1\26\1\22"+
    "\1\27\1\30\1\31\1\22\1\32\1\33\1\34\1\22"+
    "\1\35\1\36\1\37\1\40\1\22\1\41\1\42\1\43"+
    "\1\44\1\45\1\22\1\46\1\22\1\47\1\50\1\22"+
    "\1\51\1\40\2\22\1\52\1\53\1\22\1\54\1\14"+
    "\2\5\1\6\1\7\1\10\1\14\1\55\1\13\1\14"+
    "\2\56\1\14\1\57\3\14\1\60\1\61\6\14\1\62"+
    "\1\14\1\63\2\14\1\64\4\14\1\65\21\14\1\52"+
    "\2\14\1\66\1\14\2\5\1\6\1\7\1\10\1\14"+
    "\1\55\2\14\1\67\2\14\2\67\1\14\2\67\1\70"+
    "\10\67\1\71\2\67\1\72\26\67\1\52\1\14\2\67"+
    "\73\0\1\5\72\0\2\7\64\0\5\73\2\11\2\0"+
    "\5\11\1\73\45\11\2\0\2\11\1\74\1\75\2\73"+
    "\2\75\2\12\2\74\5\12\1\75\45\12\2\74\2\12"+
    "\11\0\1\76\60\0\5\73\2\11\2\0\1\77\1\16"+
    "\1\100\2\101\1\73\4\101\1\102\40\101\2\0\2\101"+
    "\1\0\5\73\2\11\2\0\1\103\4\11\1\73\45\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\1\101\2\11"+
    "\2\101\1\73\2\101\1\104\1\101\1\11\40\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\4\101\1\11\4\101\1\105\33\101\2\0\2\101"+
    "\1\0\5\73\2\11\2\0\1\101\2\11\2\101\1\73"+
    "\4\101\1\11\2\101\1\106\24\101\1\107\10\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\4\101\1\11\40\101\2\0\2\101\1\0\5\73"+
    "\2\11\2\0\1\101\2\11\2\101\1\73\3\101\1\110"+
    "\1\11\11\101\1\111\26\101\2\0\2\101\1\0\5\73"+
    "\2\11\2\0\1\101\2\11\2\101\1\73\2\101\1\112"+
    "\1\101\1\11\40\101\2\0\2\101\1\0\5\73\2\11"+
    "\2\0\1\101\2\11\2\101\1\73\4\101\1\11\2\101"+
    "\1\113\35\101\2\0\2\101\1\0\5\73\2\11\2\0"+
    "\1\101\2\11\2\101\1\73\4\101\1\11\4\101\1\114"+
    "\1\101\1\115\2\101\1\116\3\101\1\117\22\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\3\101\1\120\1\11\7\101\1\121\30\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\4\101\1\11\5\101\1\122\1\101\1\122\30\101"+
    "\2\0\2\101\1\0\5\73\2\11\2\0\1\101\2\11"+
    "\2\101\1\73\4\101\1\11\3\101\1\123\13\101\1\124"+
    "\20\101\2\0\2\101\1\0\5\73\2\11\2\0\1\101"+
    "\2\11\2\101\1\73\4\101\1\11\11\101\1\125\26\101"+
    "\2\0\2\101\1\0\5\73\2\11\2\0\1\101\2\11"+
    "\2\101\1\73\4\101\1\11\6\101\1\126\31\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\4\101\1\11\4\101\1\127\33\101\2\0\2\101"+
    "\1\0\5\73\2\11\2\0\1\101\2\11\2\101\1\73"+
    "\2\101\1\130\1\101\1\11\40\101\2\0\2\101\1\0"+
    "\5\73\2\11\2\0\1\101\2\11\2\101\1\73\4\101"+
    "\1\11\17\101\1\131\20\101\2\0\2\101\1\0\5\73"+
    "\2\11\2\0\1\101\2\11\2\101\1\73\4\101\1\11"+
    "\7\101\1\132\2\101\1\133\25\101\2\0\2\101\1\0"+
    "\5\73\2\11\2\0\1\101\2\11\2\101\1\73\4\101"+
    "\1\11\26\101\1\134\11\101\2\0\2\101\1\0\5\73"+
    "\2\11\2\0\1\101\2\11\2\101\1\73\4\101\1\11"+
    "\21\101\1\122\16\101\2\0\2\101\1\0\5\73\2\11"+
    "\2\0\1\101\2\11\2\101\1\73\2\101\1\135\1\136"+
    "\1\11\40\101\2\0\2\101\1\0\5\73\2\11\2\0"+
    "\1\101\2\11\2\101\1\73\4\101\1\11\6\101\1\137"+
    "\20\101\1\140\10\101\2\0\2\101\1\0\5\73\2\11"+
    "\2\0\1\101\2\11\2\101\1\73\2\101\1\141\1\101"+
    "\1\11\40\101\2\0\2\101\1\0\5\73\2\11\2\0"+
    "\1\101\2\11\2\101\1\73\4\101\1\11\26\101\1\142"+
    "\11\101\2\0\2\101\1\0\5\73\2\11\2\0\1\101"+
    "\2\11\2\101\1\73\4\101\1\11\11\101\1\143\26\101"+
    "\2\0\2\101\1\0\5\73\2\11\2\0\1\101\2\11"+
    "\2\101\1\73\4\101\1\11\25\101\1\144\12\101\2\0"+
    "\2\101\1\0\5\73\2\11\2\0\1\101\2\11\2\101"+
    "\1\73\4\101\1\11\32\101\1\144\5\101\2\0\2\101"+
    "\1\0\5\73\2\11\2\0\1\101\2\11\2\101\1\73"+
    "\4\101\1\11\6\101\1\145\31\101\2\0\2\101\1\0"+
    "\5\73\2\11\2\0\1\101\2\11\2\101\1\73\4\101"+
    "\1\11\4\101\1\146\33\101\2\0\2\101\2\55\2\0"+
    "\65\55\1\0\5\147\4\0\2\56\3\0\1\147\4\0"+
    "\1\150\66\0\1\151\112\0\1\152\47\0\1\153\12\0"+
    "\1\154\52\0\1\155\100\0\1\52\73\0\1\156\76\0"+
    "\1\157\60\0\1\160\51\0\1\67\2\0\2\67\1\0"+
    "\45\67\2\0\2\67\12\0\1\67\2\0\2\67\1\0"+
    "\16\67\1\161\26\67\2\0\2\67\12\0\1\67\2\0"+
    "\2\67\1\0\10\67\1\162\34\67\2\0\2\67\12\0"+
    "\1\67\2\0\2\67\1\0\13\67\1\163\31\67\2\0"+
    "\2\67\1\0\5\73\11\0\1\73\1\164\50\0\2\74"+
    "\2\0\66\74\1\75\2\73\2\75\11\74\1\75\51\74"+
    "\1\0\5\73\2\11\2\0\1\77\1\16\1\100\2\11"+
    "\1\73\4\11\1\102\40\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\1\165\4\11\1\73\45\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\1\103\1\11\1\100\2\11"+
    "\1\73\45\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\7\11\1\166\35\11\2\0\1\167\1\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\2\11\1\170"+
    "\42\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\16\11\1\171\26\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\24\11\1\172\20\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\1\11"+
    "\1\173\43\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\17\11\1\174\25\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\175\44\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\10\11"+
    "\1\176\34\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\20\11\1\177\24\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\200\44\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\21\11"+
    "\1\122\23\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\11\11\1\201\33\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\11\1\202\43\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\20\11\1\203\24\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\17\11\1\204\25\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\1\11\1\205"+
    "\15\11\1\206\25\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\2\11\1\207\7\11\1\210\32\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\3\11\1\211"+
    "\1\11\1\73\12\11\1\212\32\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\11\11\1\213\33\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\24\11\1\214\20\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\35\11\1\206\7\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\2\11\1\215"+
    "\42\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\7\11\1\216\35\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\2\11\1\217\42\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\45\11"+
    "\2\0\1\11\1\220\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\10\11\1\221\34\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\7\11\1\222\35\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\10\11"+
    "\1\223\34\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\10\11\1\224\34\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\15\11\1\225\27\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\17\11\1\206\25\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\226\34\11\2\0\2\11"+
    "\1\0\5\147\11\0\1\147\4\0\1\150\45\0\5\150"+
    "\4\0\2\227\3\0\1\150\1\0\1\230\1\231\6\0"+
    "\1\232\11\0\1\233\114\0\1\234\24\0\1\152\104\0"+
    "\1\235\61\0\1\152\61\0\1\236\133\0\1\152\34\0"+
    "\1\237\52\0\1\67\2\0\2\67\1\0\17\67\1\240"+
    "\25\67\2\0\2\67\12\0\1\67\2\0\2\67\1\0"+
    "\1\67\1\241\43\67\2\0\2\67\21\0\1\242\50\0"+
    "\5\73\2\11\2\0\1\165\4\11\1\73\4\11\1\243"+
    "\40\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\16\11\1\244\26\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\13\11\1\245\31\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\10\11"+
    "\1\246\34\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\30\11\1\247\14\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\24\11\1\250\20\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\4\11\1\251\40\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\20\11\1\252\24\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\1\11\1\253"+
    "\43\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\11\11\1\254\33\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\3\11\1\255\1\11\1\73\45\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\20\11"+
    "\1\256\24\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\30\11\1\257\14\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\11\11\1\260\33\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\3\11\1\261"+
    "\1\11\1\73\45\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\262\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\11\11\1\122"+
    "\33\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\17\11\1\263\25\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\2\11\1\264\42\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\1\265"+
    "\44\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\2\11\1\266\42\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\10\11\1\267\34\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\3\11"+
    "\1\270\41\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\16\11\1\271\26\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\17\11\1\272\25\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\30\11\1\273\14\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\11\11\1\274\33\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\10\11\1\275"+
    "\34\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\13\11\1\276\31\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\13\11\1\277\31\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\11\11"+
    "\1\300\33\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\16\11\1\301\26\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\302\44\11\2\0"+
    "\2\11\12\0\2\227\121\0\1\303\47\0\1\304\65\0"+
    "\1\305\111\0\1\306\62\0\1\307\55\0\1\310\72\0"+
    "\1\311\47\0\5\73\2\11\2\0\1\312\4\11\1\73"+
    "\45\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\1\11\1\313\43\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\10\11\1\314\34\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\1\315"+
    "\44\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\11\11\1\316\33\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\13\11\1\317\31\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\1\22\2\11\2\22"+
    "\1\73\4\22\1\11\40\22\2\0\2\22\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\12\11\1\320\15\11\1\321"+
    "\3\11\1\322\3\11\1\323\4\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\12\11\1\324\32\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\13\11\1\325\31\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\1\326\44\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\11\1\327\43\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\16\11\1\330\26\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\7\11\1\331\3\11\1\325\31\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\13\11\1\332\31\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\34\11\1\333\10\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\34\11\1\334"+
    "\10\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\10\11\1\335\34\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\2\11\1\336\42\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\13\11"+
    "\1\337\31\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\1\11\1\340\43\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\34\11\1\122\10\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\31\11\1\341\13\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\342\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\11\11\1\343"+
    "\33\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\1\122\44\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\3\11\1\344\1\11\1\73\45\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\3\11\1\345"+
    "\41\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\7\11\1\346\35\11\2\0\2\11\23\0\1\303"+
    "\75\0\1\303\124\0\1\303\34\0\1\347\67\0\1\350"+
    "\62\0\1\351\50\0\5\73\2\11\2\0\5\11\1\73"+
    "\2\11\1\352\42\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\353\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\12\11\1\122"+
    "\32\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\33\11\1\354\11\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\30\11\1\122\14\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\40\11"+
    "\1\122\4\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\13\11\1\355\31\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\26\11\1\122\16\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\2\11\1\320\42\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\356\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\17\11\1\357"+
    "\25\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\16\11\1\335\26\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\7\11\1\360\35\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\3\11"+
    "\1\361\41\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\16\11\1\362\26\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\7\11\1\122\35\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\25\11\1\363\17\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\364\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\13\11\1\365"+
    "\31\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\27\11\1\366\15\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\16\11\1\367\26\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\11\11"+
    "\1\370\33\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\11\11\1\371\33\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\13\11\1\372\31\11"+
    "\2\0\2\11\33\0\1\373\55\0\1\374\51\0\5\73"+
    "\2\11\2\0\5\11\1\73\7\11\1\375\35\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\1\11"+
    "\1\376\43\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\10\11\1\122\34\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\14\11\1\370\30\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\13\11\1\377\31\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\1\u0100\44\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\17\11\1\122\25\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\1\11\1\u0101\43\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\35\11\1\122\7\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\7\11\1\331"+
    "\3\11\1\u0102\31\11\2\0\2\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\11\11\1\u0103\33\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\3\11\1\u0104\1\11\1\73"+
    "\45\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\11\11\1\u0105\33\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\1\11\1\u0106\43\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\2\11"+
    "\1\u0107\42\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\16\11\1\u0108\26\11\2\0\2\11\36\0"+
    "\1\u0109\33\0\5\73\2\11\2\0\5\11\1\73\16\11"+
    "\1\u010a\26\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\1\u010b\44\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\16\11\1\122\26\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\1\u010c"+
    "\44\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\26\11\1\u010d\16\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\10\11\1\u010e\34\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\43\11"+
    "\1\u010f\1\11\2\0\1\u010f\1\11\1\0\5\73\2\11"+
    "\2\0\5\11\1\73\10\11\1\u0110\34\11\2\0\2\11"+
    "\1\0\5\73\2\11\2\0\5\11\1\73\1\u0111\44\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\5\11\1\73"+
    "\1\u0112\44\11\2\0\2\11\20\0\1\u0113\51\0\5\73"+
    "\2\11\2\0\5\11\1\73\11\11\1\u0114\33\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\7\11"+
    "\1\u0115\35\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\25\11\1\u0116\17\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\1\122\20\11\1\122"+
    "\23\11\2\0\2\11\1\0\5\73\2\11\2\0\5\11"+
    "\1\73\10\11\1\u0117\34\11\2\0\2\11\1\0\5\73"+
    "\2\11\2\0\5\11\1\73\11\11\1\u0118\33\11\2\0"+
    "\2\11\1\0\5\73\2\11\2\0\5\11\1\73\17\11"+
    "\1\u0119\25\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\3\11\1\206\41\11\2\0\2\11\1\0"+
    "\5\73\2\11\2\0\5\11\1\73\13\11\1\u0102\31\11"+
    "\2\0\2\11\1\0\5\73\2\11\2\0\4\11\1\122"+
    "\1\73\45\11\2\0\2\11\1\0\5\73\2\11\2\0"+
    "\5\11\1\73\17\11\1\u011a\25\11\2\0\2\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13908];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\6\1\1\11\35\1\2\11\17\1\1\0"+
    "\2\1\1\11\50\1\3\0\1\1\6\0\3\1\1\0"+
    "\43\1\5\0\2\11\1\0\2\1\1\0\40\1\1\11"+
    "\6\0\35\1\1\11\2\0\21\1\1\0\1\11\26\1"+
    "\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BrowserslistLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BrowserslistLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BrowserslistTypes.RBRACKET;
            } 
            // fall through
          case 38: break;
          case 2: 
            { yybegin(YYINITIAL); return BrowserslistTypes.EOL;
            } 
            // fall through
          case 39: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 4: 
            { return BrowserslistTypes.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 5: 
            { return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 42: break;
          case 6: 
            { return BrowserslistTypes.COMPARE;
            } 
            // fall through
          case 43: break;
          case 7: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 44: break;
          case 8: 
            { return BrowserslistTypes.INTEGER;
            } 
            // fall through
          case 45: break;
          case 9: 
            { yybegin(YYINITIAL); return BrowserslistTypes.OR;
            } 
            // fall through
          case 46: break;
          case 10: 
            { return BrowserslistTypes.LBRACKET;
            } 
            // fall through
          case 47: break;
          case 11: 
            { yybegin(YYINITIAL); return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 48: break;
          case 12: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSION;
            } 
            // fall through
          case 49: break;
          case 13: 
            { yybegin(YYINITIAL); return BrowserslistTypes.FEATURE;
            } 
            // fall through
          case 50: break;
          case 14: 
            { return BrowserslistTypes.PERCENT;
            } 
            // fall through
          case 51: break;
          case 15: 
            { return BrowserslistTypes.STATS;
            } 
            // fall through
          case 52: break;
          case 16: 
            { return BrowserslistTypes.FLOAT;
            } 
            // fall through
          case 53: break;
          case 17: 
            { yybegin(TARGET); return BrowserslistTypes.TARGET;
            } 
            // fall through
          case 54: break;
          case 18: 
            { return BrowserslistTypes.IN;
            } 
            // fall through
          case 55: break;
          case 19: 
            { return BrowserslistTypes.TIME;
            } 
            // fall through
          case 56: break;
          case 20: 
            { yybegin(YYINITIAL); return BrowserslistTypes.AND;
            } 
            // fall through
          case 57: break;
          case 21: 
            { yybegin(YYINITIAL); return BrowserslistTypes.NOT;
            } 
            // fall through
          case 58: break;
          case 22: 
            { yybegin(YYINITIAL); return BrowserslistTypes.TARGET_VERSIONS_RANGE;
            } 
            // fall through
          case 59: break;
          case 23: 
            { return BrowserslistTypes.LAST;
            } 
            // fall through
          case 60: break;
          case 24: 
            { return BrowserslistTypes.DEAD;
            } 
            // fall through
          case 61: break;
          case 25: 
            { return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 62: break;
          case 26: 
            { return BrowserslistTypes.YEARS;
            } 
            // fall through
          case 63: break;
          case 27: 
            { return BrowserslistTypes.SINCE;
            } 
            // fall through
          case 64: break;
          case 28: 
            { return BrowserslistTypes.COVER;
            } 
            // fall through
          case 65: break;
          case 29: 
            { yybegin(YYINITIAL); return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 66: break;
          case 30: 
            { return BrowserslistTypes.EXTENDS;
            } 
            // fall through
          case 67: break;
          case 31: 
            { return BrowserslistTypes.CURRENT_NODE_VERSION;
            } 
            // fall through
          case 68: break;
          case 32: 
            { return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 69: break;
          case 33: 
            { yybegin(YYINITIAL); return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 70: break;
          case 34: 
            { yybegin(SUPPORTS); return BrowserslistTypes.SUPPORTS;
            } 
            // fall through
          case 71: break;
          case 35: 
            { return BrowserslistTypes.DEFAULTS;
            } 
            // fall through
          case 72: break;
          case 36: 
            { return BrowserslistTypes.MAINTAINED_NODE_VERSIONS;
            } 
            // fall through
          case 73: break;
          case 37: 
            { return BrowserslistTypes.UNRELEASED;
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
