/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.aleksandrsl.intellijbrowserslist.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.aleksandrsl.intellijbrowserslist.psi.BrowserslistTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/aleksandrsl/Projects/intellij-browserslist/src/main/grammar/Browserslist.flex</tt>
 */
class BrowserslistLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TARGET = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\5\1\2\1\1\1\6\1\3\22\4\1\5\2\4\1\7\1\4\1\14\7\4\1\23\1\13\1\4\12\12"+
    "\2\4\1\10\1\11\1\10\2\4\1\34\1\46\1\51\1\24\1\42\1\25\3\24\1\62\2\24\1\44"+
    "\1\60\1\41\1\61\1\56\1\63\1\40\1\24\1\55\5\24\4\4\1\37\1\4\1\21\1\45\1\47"+
    "\1\36\1\30\1\31\1\54\1\52\1\26\1\64\1\50\1\22\1\15\1\35\1\32\1\43\1\57\1\27"+
    "\1\17\1\20\1\53\1\65\1\24\1\33\1\16\1\24\12\4\1\1\12\4\1\0\11\4\1\24\12\4"+
    "\1\24\4\4\1\24\5\4\27\24\1\4\12\24\4\4\14\24\16\4\5\24\7\4\1\24\1\4\1\24\1"+
    "\4\5\24\1\4\2\24\2\4\4\24\1\4\1\24\6\4\1\24\1\4\3\24\1\4\1\24\1\4\4\24\1\4"+
    "\23\24\1\4\11\24\1\4\26\24\2\4\1\24\6\4\10\24\10\4\16\24\1\4\1\24\1\4\2\24"+
    "\1\4\2\24\1\4\1\24\10\4\13\24\5\4\3\24\15\4\12\12\4\4\6\24\1\4\10\24\2\4\12"+
    "\24\1\4\6\24\12\12\3\24\2\4\14\24\2\4\3\24\12\12\14\24\4\4\1\24\5\4\16\24"+
    "\2\4\14\24\4\4\5\24\1\4\10\24\6\4\20\24\2\4\12\12\1\24\2\4\16\24\1\4\1\24"+
    "\3\4\4\24\2\4\11\24\2\4\2\24\2\4\4\24\10\4\1\24\4\4\2\24\1\4\1\24\1\4\3\24"+
    "\1\4\6\24\4\4\2\24\1\4\2\24\1\4\2\24\1\4\2\24\2\4\1\24\1\4\5\24\4\4\2\24\2"+
    "\4\3\24\3\4\1\24\7\4\4\24\1\4\1\24\7\4\12\12\6\24\13\4\3\24\1\4\11\24\1\4"+
    "\2\24\1\4\2\24\1\4\5\24\2\4\12\24\1\4\3\24\1\4\3\24\2\4\1\24\30\4\1\24\7\4"+
    "\3\24\1\4\10\24\2\4\6\24\2\4\2\24\2\4\3\24\10\4\2\24\4\4\2\24\1\4\1\24\1\4"+
    "\1\24\20\4\2\24\1\4\6\24\3\4\3\24\1\4\4\24\3\4\2\24\1\4\1\24\1\4\2\24\3\4"+
    "\2\24\3\4\3\24\3\4\14\24\4\4\5\24\3\4\3\24\1\4\4\24\2\4\1\24\6\4\1\24\10\4"+
    "\4\24\1\4\10\24\1\4\3\24\1\4\30\24\3\4\10\24\1\4\3\24\1\4\4\24\7\4\2\24\1"+
    "\4\3\24\5\4\4\24\1\4\5\24\2\4\4\24\5\4\2\24\7\4\1\24\2\4\2\24\16\4\3\24\1"+
    "\4\10\24\1\4\7\24\1\4\3\24\1\4\5\24\5\4\4\24\7\4\1\24\12\4\6\24\2\4\2\24\1"+
    "\4\22\24\3\4\10\24\1\4\11\24\1\4\1\24\2\4\7\24\3\4\1\24\4\4\6\24\1\4\1\24"+
    "\1\4\10\24\2\4\2\24\14\4\17\24\1\4\12\12\7\4\2\24\1\4\1\24\2\4\2\24\1\4\1"+
    "\24\2\4\1\24\6\4\4\24\1\4\7\24\1\4\3\24\1\4\1\24\1\4\1\24\2\4\2\24\1\4\15"+
    "\24\1\4\3\24\2\4\5\24\1\4\1\24\1\4\6\24\2\4\12\12\2\4\4\24\10\4\2\24\13\4"+
    "\1\24\1\4\1\24\1\4\1\24\4\4\12\24\1\4\24\24\3\4\5\24\1\4\12\24\6\4\1\24\11"+
    "\4\12\12\4\24\2\4\6\24\1\4\1\24\5\4\1\24\2\4\13\24\1\4\15\24\1\4\4\24\2\4"+
    "\7\24\1\4\1\24\1\4\4\24\2\4\1\24\1\4\4\24\2\4\7\24\1\4\1\24\1\4\4\24\2\4\16"+
    "\24\2\4\6\24\2\4\15\24\2\4\1\24\1\0\32\24\3\4\13\24\7\4\15\24\1\4\7\24\13"+
    "\4\4\24\14\4\1\24\1\4\2\24\14\4\4\24\3\4\1\24\4\4\2\24\15\4\3\24\2\4\12\24"+
    "\15\4\1\24\23\4\5\24\12\12\3\4\6\24\1\4\23\24\1\4\2\24\6\4\6\24\5\4\15\24"+
    "\1\4\1\24\1\4\1\24\1\4\1\24\1\4\6\24\1\4\7\24\1\4\1\24\3\4\3\24\1\4\7\24\3"+
    "\4\4\24\2\4\6\24\4\4\13\0\15\4\2\1\5\4\1\0\17\4\1\24\4\4\1\24\12\4\1\0\1\4"+
    "\1\24\15\4\1\24\2\4\1\24\4\4\1\24\2\4\12\24\1\4\1\24\3\4\5\24\6\4\1\24\1\4"+
    "\1\24\1\4\1\24\1\4\4\24\1\4\13\24\2\4\4\24\5\4\5\24\4\4\1\24\7\4\17\24\6\4"+
    "\15\24\7\4\10\24\11\4\7\24\1\4\7\24\1\4\1\0\4\4\3\24\11\4\5\24\2\4\5\24\3"+
    "\4\7\24\2\4\2\24\2\4\3\24\5\4\13\24\12\12\2\24\4\4\3\24\1\4\12\24\1\4\1\24"+
    "\7\4\11\24\2\4\27\24\2\4\15\24\3\4\1\24\1\4\1\24\2\4\1\24\16\4\1\24\12\12"+
    "\5\24\3\4\5\24\12\4\6\24\2\4\6\24\2\4\6\24\11\4\13\24\1\4\2\24\2\4\7\24\4"+
    "\4\5\24\3\4\5\24\5\4\12\24\1\4\5\24\1\4\1\24\1\4\2\24\1\4\2\24\1\4\12\24\3"+
    "\4\15\24\3\4\2\24\30\4\16\24\4\4\1\24\2\4\6\24\2\4\6\24\2\4\6\24\2\4\3\24"+
    "\3\4\14\24\1\4\16\24\1\4\2\24\1\4\1\24\15\4\1\24\2\4\4\24\4\4\10\24\1\4\5"+
    "\24\12\4\6\24\2\4\1\24\1\4\14\24\1\4\2\24\3\4\1\24\2\4\4\24\1\4\2\24\12\4"+
    "\10\24\6\4\6\24\1\4\2\24\5\4\10\24\1\4\3\24\1\4\13\24\4\4\3\24\4\4\6\24\1"+
    "\4\12\12\4\24\2\4\1\24\11\4\5\24\5\4\3\24\3\4\12\12\1\24\1\4\1\24\3\4\10\24"+
    "\6\4\1\24\1\4\7\24\1\4\1\24\1\4\4\24\1\4\2\24\6\4\1\24\5\4\7\24\2\4\7\24\3"+
    "\4\6\24\1\4\1\24\10\4\6\24\2\4\10\24\10\4\6\24\2\4\1\24\3\4\1\24\13\4\10\24"+
    "\5\4\15\24\3\4\2\24\6\4\5\24\3\4\6\24\10\4\10\24\2\4\7\24\16\4\4\24\4\4\3"+
    "\24\15\4\1\24\2\4\2\24\2\4\4\24\1\4\14\24\1\4\1\24\1\4\7\24\1\4\21\24\1\4"+
    "\4\24\2\4\10\24\1\4\7\24\1\4\14\24\1\4\4\24\1\4\5\24\1\4\1\24\3\4\11\24\1"+
    "\4\10\24\2\4\22\12\5\4\1\24\16\4\1\24\13\4\2\24\1\4\2\24\1\4\5\24\6\4\2\24"+
    "\1\4\1\24\2\4\1\24\1\4\12\24\1\4\4\24\1\4\1\24\1\4\1\24\6\4\1\24\4\4\1\24"+
    "\1\4\1\24\1\4\1\24\1\4\3\24\1\4\2\24\1\4\1\24\2\4\1\24\1\4\1\24\1\4\1\24\1"+
    "\4\1\24\1\4\1\24\1\4\2\24\1\4\1\24\2\4\4\24\1\4\7\24\1\4\4\24\1\4\4\24\1\4"+
    "\1\24\1\4\12\24\1\4\5\24\1\4\3\24\1\4\5\24\1\4\5\24");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\34\7\3\10\1\4\1\5\1\11\6\1\2\0"+
    "\1\4\1\5\1\6\1\0\1\12\1\13\1\7\1\14"+
    "\10\13\1\15\1\13\1\16\2\13\1\15\23\13\1\5"+
    "\3\0\1\11\5\0\1\17\37\7\1\20\7\0\10\7"+
    "\1\21\6\7\1\22\17\7\1\20\6\0\1\17\1\7"+
    "\1\23\1\24\1\25\22\7\1\26\4\7\1\27\2\0"+
    "\15\7\1\15\2\7\1\0\1\13\10\7\1\30\1\7"+
    "\1\31\1\32\1\7\1\33\1\34\1\7\1\15\3\7"+
    "\1\31\1\32\5\7\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\u010e\0\242"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\154\0\242\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u010e\0\u0a56\0\u010e"+
    "\0\u0a8c\0\u01e6\0\u010e\0\u0360\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0360\0\u0d4a\0\u0d80\0\u0360\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\154"+
    "\0\u11b8\0\u11ee\0\u1224\0\u11b8\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u0360\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u0360\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u0dec\0\u218a"+
    "\0\154\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u1bd8"+
    "\0\u2304\0\u0360\0\u0360\0\u0360\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0\0\u0360\0\u2706"+
    "\0\u273c\0\u2772\0\u27a8\0\154\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u1116\0\u2b08\0\u2b3e\0\u2b74\0\154"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24"+
    "\0\u0360\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u0360\0\u0360\0\u2e32"+
    "\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u0360\0\154\0\u2f40\0\u2f76"+
    "\0\u2fac\0\u2fe2\0\u3018\0\u0360\0\u0360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\5\1\11"+
    "\1\12\1\7\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\20\1\24\1\25\1\20"+
    "\1\26\1\27\1\30\1\20\1\31\1\32\1\33\1\20"+
    "\1\34\1\35\1\36\1\37\1\20\1\40\1\41\1\42"+
    "\1\43\1\44\1\20\1\45\1\20\1\46\1\47\1\20"+
    "\1\32\1\37\3\20\1\50\1\3\1\51\1\52\1\53"+
    "\1\3\1\10\1\52\1\54\1\55\1\3\2\56\1\3"+
    "\1\57\2\3\1\60\1\61\6\3\1\62\11\3\1\63"+
    "\22\3\1\64\70\0\1\10\2\0\2\10\61\0\1\4"+
    "\63\0\4\65\1\66\2\65\57\66\2\67\2\65\1\11"+
    "\2\67\57\11\4\65\1\66\2\65\2\66\1\70\54\66"+
    "\4\65\1\66\2\65\3\66\1\71\1\72\1\73\6\74"+
    "\1\75\42\74\4\65\1\66\2\65\3\66\1\76\53\66"+
    "\4\65\1\66\2\65\3\66\1\74\2\66\4\74\1\77"+
    "\1\74\1\23\42\74\4\65\1\66\2\65\3\66\1\74"+
    "\2\66\6\74\1\23\4\74\1\100\35\74\4\65\1\66"+
    "\2\65\3\66\1\74\2\66\6\74\1\23\2\74\1\101"+
    "\24\74\1\102\12\74\4\65\1\66\2\65\3\66\1\74"+
    "\2\66\6\74\1\23\42\74\4\65\1\66\2\65\3\66"+
    "\1\74\2\66\5\74\1\103\1\23\11\74\1\104\30\74"+
    "\4\65\1\66\2\65\3\66\1\74\2\66\4\74\1\105"+
    "\1\74\1\23\42\74\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\51\23\4\65\1\66\2\65\3\66\1\74\2\66"+
    "\6\74\1\23\2\74\1\106\37\74\4\65\1\66\2\65"+
    "\3\66\1\74\2\66\6\74\1\23\4\74\1\107\1\74"+
    "\1\110\2\74\1\111\3\74\1\112\24\74\4\65\1\66"+
    "\2\65\3\66\1\74\2\66\5\74\1\113\1\23\42\74"+
    "\4\65\1\66\2\65\3\66\1\74\2\66\6\74\1\23"+
    "\5\74\1\114\1\74\1\114\32\74\4\65\1\66\2\65"+
    "\3\66\1\74\2\66\6\74\1\23\17\74\1\115\22\74"+
    "\4\65\1\66\2\65\3\66\1\74\2\66\6\74\1\23"+
    "\11\74\1\116\30\74\4\65\1\66\2\65\3\66\1\74"+
    "\2\66\6\74\1\23\6\74\1\117\33\74\4\65\1\66"+
    "\2\65\3\66\1\74\2\66\6\74\1\23\4\74\1\120"+
    "\35\74\4\65\1\66\2\65\3\66\1\74\2\66\4\74"+
    "\1\121\1\74\1\23\42\74\4\65\1\66\2\65\3\66"+
    "\1\74\2\66\6\74\1\23\17\74\1\122\22\74\4\65"+
    "\1\66\2\65\3\66\1\74\2\66\6\74\1\23\7\74"+
    "\1\123\2\74\1\124\27\74\4\65\1\66\2\65\3\66"+
    "\1\74\2\66\6\74\1\23\26\74\1\125\13\74\4\65"+
    "\1\66\2\65\3\66\1\74\2\66\6\74\1\23\21\74"+
    "\1\114\20\74\4\65\1\66\2\65\3\66\1\74\2\66"+
    "\4\74\1\126\1\127\1\23\42\74\4\65\1\66\2\65"+
    "\3\66\1\74\2\66\6\74\1\23\6\74\1\130\20\74"+
    "\1\131\12\74\4\65\1\66\2\65\3\66\1\74\2\66"+
    "\4\74\1\132\1\74\1\23\42\74\4\65\1\66\2\65"+
    "\3\66\1\74\2\66\6\74\1\23\26\74\1\133\13\74"+
    "\4\65\1\66\2\65\3\66\1\74\2\66\6\74\1\23"+
    "\11\74\1\134\30\74\4\65\1\66\2\65\3\66\1\74"+
    "\2\66\6\74\1\23\25\74\1\135\14\74\4\65\1\66"+
    "\2\65\3\66\1\74\2\66\6\74\1\23\32\74\1\136"+
    "\7\74\4\65\1\66\2\65\3\66\1\74\2\66\6\74"+
    "\1\23\4\74\1\137\35\74\2\0\1\51\63\0\2\54"+
    "\2\0\62\54\11\0\1\140\54\0\4\141\1\0\2\141"+
    "\3\0\2\56\7\0\1\142\63\0\1\143\107\0\1\144"+
    "\44\0\1\145\62\0\1\146\106\0\1\147\55\0\1\150"+
    "\35\0\4\65\1\0\2\65\10\0\1\151\46\0\2\67"+
    "\2\65\1\54\2\67\57\54\4\65\1\66\2\65\3\66"+
    "\1\71\1\72\1\73\6\23\1\75\42\23\4\65\1\66"+
    "\2\65\3\66\1\152\2\66\51\23\4\65\1\66\2\65"+
    "\3\66\1\76\1\66\1\73\51\66\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\11\23\1\153\35\23\1\154\1\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\4\23\1\155"+
    "\44\23\4\65\1\66\2\65\3\66\1\23\2\66\20\23"+
    "\1\156\30\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\26\23\1\157\22\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\3\23\1\160\45\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\21\23\1\161\27\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\2\23\1\162\46\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\12\23\1\163\36\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\22\23\1\164\26\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\2\23\1\165"+
    "\46\23\4\65\1\66\2\65\3\66\1\23\2\66\23\23"+
    "\1\114\25\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\13\23\1\166\35\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\22\23\1\167\26\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\21\23\1\170\27\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\21\23\1\171\27\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\172\7\23\1\173"+
    "\34\23\4\65\1\66\2\65\3\66\1\23\2\66\1\174"+
    "\13\23\1\175\34\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\13\23\1\176\35\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\26\23\1\177\22\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\37\23\1\171\11\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\200\44\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\11\23\1\201\37\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\4\23\1\202"+
    "\44\23\4\65\1\66\2\65\3\66\1\23\2\66\50\23"+
    "\1\203\4\65\1\66\2\65\3\66\1\23\2\66\12\23"+
    "\1\204\36\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\11\23\1\205\37\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\12\23\1\206\36\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\12\23\1\207\36\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\17\23\1\210\31\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\210\44\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\12\23\1\211\36\23"+
    "\4\141\1\0\2\141\14\0\1\142\42\0\4\142\1\0"+
    "\2\142\3\0\2\212\4\0\1\213\1\214\6\0\1\215"+
    "\11\0\1\216\107\0\1\217\23\0\1\144\72\0\1\144"+
    "\121\0\1\144\31\0\1\220\56\0\1\221\45\0\4\65"+
    "\1\66\2\65\3\66\1\152\2\66\6\23\1\222\42\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\20\23\1\223"+
    "\30\23\4\65\1\66\2\65\3\66\1\23\2\66\15\23"+
    "\1\224\33\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\12\23\1\225\36\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\32\23\1\226\16\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\26\23\1\227\22\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\6\23\1\230\42\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\22\23\1\231\26\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\3\23\1\232\45\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\13\23\1\233"+
    "\35\23\4\65\1\66\2\65\3\66\1\23\2\66\1\234"+
    "\50\23\4\65\1\66\2\65\3\66\1\23\2\66\22\23"+
    "\1\235\26\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\32\23\1\236\16\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\1\237\50\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\12\23\1\240\36\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\13\23\1\114\35\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\21\23\1\241\27\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\242\44\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\2\23\1\243\46\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\4\23\1\244"+
    "\44\23\4\65\1\66\2\65\3\66\1\23\2\66\12\23"+
    "\1\245\36\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\5\23\1\246\43\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\20\23\1\247\30\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\21\23\1\250\27\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\32\23\1\251\16\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\13\23\1\252\35\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\12\23\1\253\36\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\15\23\1\254"+
    "\33\23\4\65\1\66\2\65\3\66\1\23\2\66\15\23"+
    "\1\255\33\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\13\23\1\256\35\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\20\23\1\257\30\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\2\23\1\260\46\23\12\0\2\212\115\0"+
    "\1\261\44\0\1\262\62\0\1\263\106\0\1\264\57\0"+
    "\1\265\52\0\1\266\67\0\1\267\44\0\4\65\1\66"+
    "\2\65\3\66\1\270\2\66\51\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\3\23\1\271\45\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\12\23\1\272\36\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\2\23\1\273\46\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\13\23\1\274"+
    "\35\23\4\65\1\66\2\65\3\66\1\23\2\66\15\23"+
    "\1\275\33\23\4\65\1\66\2\65\3\66\1\20\2\66"+
    "\6\20\1\23\42\20\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\14\23\1\276\15\23\1\277\3\23\1\300\3\23"+
    "\1\301\6\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\14\23\1\302\34\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\15\23\1\303\33\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\2\23\1\304\46\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\3\23\1\305\45\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\11\23\1\306\3\23\1\303"+
    "\33\23\4\65\1\66\2\65\3\66\1\23\2\66\15\23"+
    "\1\307\33\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\36\23\1\310\12\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\36\23\1\311\12\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\12\23\1\312\36\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\4\23\1\313\6\23\1\114\35\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\15\23\1\314"+
    "\33\23\4\65\1\66\2\65\3\66\1\23\2\66\3\23"+
    "\1\315\45\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\36\23\1\114\12\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\33\23\1\316\15\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\12\23\1\317\36\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\13\23\1\320\35\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\2\23\1\114\46\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\1\321\50\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\5\23\1\322\43\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\11\23\1\323"+
    "\37\23\22\0\1\261\72\0\1\261\121\0\1\261\31\0"+
    "\1\324\64\0\1\325\57\0\1\326\45\0\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\327\44\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\12\23\1\330\36\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\14\23\1\114"+
    "\34\23\4\65\1\66\2\65\3\66\1\23\2\66\35\23"+
    "\1\331\13\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\32\23\1\114\16\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\42\23\1\114\6\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\15\23\1\332\33\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\30\23\1\114\20\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\4\23\1\276\44\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\12\23\1\333\36\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\20\23\1\312"+
    "\30\23\4\65\1\66\2\65\3\66\1\23\2\66\11\23"+
    "\1\334\37\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\5\23\1\335\43\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\20\23\1\336\30\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\11\23\1\114\37\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\27\23\1\337\21\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\12\23\1\340\36\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\15\23\1\341\33\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\31\23\1\342"+
    "\17\23\4\65\1\66\2\65\3\66\1\23\2\66\20\23"+
    "\1\343\30\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\13\23\1\344\35\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\13\23\1\345\35\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\15\23\1\346\33\23\32\0\1\347\52\0"+
    "\1\350\46\0\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\11\23\1\351\37\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\3\23\1\352\45\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\12\23\1\114\36\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\16\23\1\344\32\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\15\23\1\353\33\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\21\23\1\114\27\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\3\23\1\354"+
    "\45\23\4\65\1\66\2\65\3\66\1\23\2\66\37\23"+
    "\1\114\11\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\11\23\1\306\3\23\1\355\33\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\13\23\1\356\35\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\1\357\50\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\13\23\1\360\35\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\3\23\1\361\45\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\4\23\1\362"+
    "\44\23\4\65\1\66\2\65\3\66\1\23\2\66\20\23"+
    "\1\363\30\23\35\0\1\364\30\0\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\20\23\1\365\30\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\2\23\1\366\46\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\20\23\1\114\30\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\2\23\1\367"+
    "\46\23\4\65\1\66\2\65\3\66\1\23\2\66\30\23"+
    "\1\370\20\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\12\23\1\371\36\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\45\23\1\372\1\23\1\372\1\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\12\23\1\373\36\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\2\23\1\374\46\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\2\23\1\375"+
    "\46\23\17\0\1\376\46\0\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\13\23\1\377\35\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\11\23\1\u0100\37\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\27\23\1\u0101\21\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\2\23\1\114\20\23"+
    "\1\114\25\23\4\65\1\66\2\65\3\66\1\23\2\66"+
    "\12\23\1\u0102\36\23\4\65\1\66\2\65\3\66\1\23"+
    "\2\66\13\23\1\u0103\35\23\4\65\1\66\2\65\3\66"+
    "\1\23\2\66\21\23\1\u0104\27\23\4\65\1\66\2\65"+
    "\3\66\1\23\2\66\5\23\1\171\43\23\4\65\1\66"+
    "\2\65\3\66\1\23\2\66\15\23\1\355\33\23\4\65"+
    "\1\66\2\65\3\66\1\23\2\66\1\23\1\114\47\23"+
    "\4\65\1\66\2\65\3\66\1\23\2\66\21\23\1\u0105"+
    "\27\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12366];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\44\1\1\11\13\1\2\0\3\1\1\0"+
    "\45\1\1\11\3\0\1\1\5\0\41\1\7\0\37\1"+
    "\1\11\6\0\34\1\1\11\2\0\20\1\1\0\1\11"+
    "\25\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public BrowserslistLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BrowserslistLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return BrowserslistTypes.EOL;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 33: break;
          case 4: 
            { return BrowserslistTypes.COMMENT;
            } 
            // fall through
          case 34: break;
          case 5: 
            { return BrowserslistTypes.COMPARE;
            } 
            // fall through
          case 35: break;
          case 6: 
            { return BrowserslistTypes.INTEGER;
            } 
            // fall through
          case 36: break;
          case 7: 
            { return BrowserslistTypes.FEATURE;
            } 
            // fall through
          case 37: break;
          case 8: 
            { yybegin(YYINITIAL); return BrowserslistTypes.EOL;
            } 
            // fall through
          case 38: break;
          case 9: 
            { return BrowserslistTypes.TARGET_VERSION;
            } 
            // fall through
          case 39: break;
          case 10: 
            { return BrowserslistTypes.PERCENT;
            } 
            // fall through
          case 40: break;
          case 11: 
            { return BrowserslistTypes.STATS;
            } 
            // fall through
          case 41: break;
          case 12: 
            { return BrowserslistTypes.FLOAT;
            } 
            // fall through
          case 42: break;
          case 13: 
            { yybegin(TARGET); return BrowserslistTypes.TARGET;
            } 
            // fall through
          case 43: break;
          case 14: 
            { return BrowserslistTypes.IN;
            } 
            // fall through
          case 44: break;
          case 15: 
            { return BrowserslistTypes.TIME;
            } 
            // fall through
          case 45: break;
          case 16: 
            { return BrowserslistTypes.TARGET_VERSIONS_RANGE;
            } 
            // fall through
          case 46: break;
          case 17: 
            { return BrowserslistTypes.LAST;
            } 
            // fall through
          case 47: break;
          case 18: 
            { return BrowserslistTypes.DEAD;
            } 
            // fall through
          case 48: break;
          case 19: 
            { return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 49: break;
          case 20: 
            { return BrowserslistTypes.YEARS;
            } 
            // fall through
          case 50: break;
          case 21: 
            { return BrowserslistTypes.SINCE;
            } 
            // fall through
          case 51: break;
          case 22: 
            { return BrowserslistTypes.COVER;
            } 
            // fall through
          case 52: break;
          case 23: 
            { yybegin(YYINITIAL); return BrowserslistTypes.MAJOR;
            } 
            // fall through
          case 53: break;
          case 24: 
            { return BrowserslistTypes.CURRENT_NODE_VERSION;
            } 
            // fall through
          case 54: break;
          case 25: 
            { return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 55: break;
          case 26: 
            { yybegin(YYINITIAL); return BrowserslistTypes.VERSIONS;
            } 
            // fall through
          case 56: break;
          case 27: 
            { return BrowserslistTypes.SUPPORTS;
            } 
            // fall through
          case 57: break;
          case 28: 
            { return BrowserslistTypes.DEFAULTS;
            } 
            // fall through
          case 58: break;
          case 29: 
            { return BrowserslistTypes.MAINTAINED_NODE_VERSIONS;
            } 
            // fall through
          case 59: break;
          case 30: 
            { return BrowserslistTypes.UNRELEASED;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
